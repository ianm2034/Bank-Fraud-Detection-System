{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1d6206f3-7e09-447b-9561-bf6a71b6e184",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nMain Objective: To develop a real-time, supervised machine learning model for detecting credit card fraud in banking systems.\\n\\nBusiness Goals:\\n1. Minimise financial losses from fraudulent transactions.\\n2. Reduce false positives to avoid customer inconvenience.\\n3. Provide real-time fraud detection capabilities.\\n\\nCRISP-DM Framework:\\n1. Business Understanding - Completed\\n2. Data Understanding - Next\\n3. Data Preparation\\n4. Modelling\\n5. Evaluation\\n6. Deployment\\n'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Understanding Business\n",
    "\"\"\"\n",
    "Main Objective: To develop a real-time, supervised machine learning model for detecting credit card fraud in banking systems.\n",
    "\n",
    "Business Goals:\n",
    "1. Minimise financial losses from fraudulent transactions.\n",
    "2. Reduce false positives to avoid customer inconvenience.\n",
    "3. Provide real-time fraud detection capabilities.\n",
    "\n",
    "CRISP-DM Framework:\n",
    "1. Business Understanding - Completed\n",
    "2. Data Understanding - Next\n",
    "3. Data Preparation\n",
    "4. Modelling\n",
    "5. Evaluation\n",
    "6. Deployment\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e1d8ce67-5aed-4eca-b373-33dbbc17ab81",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries for data handling, visualisation and modelling\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
    "from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, explained_variance_score\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline \n",
    "import joblib\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d08319b7-74b3-43d7-aba4-c3cdbce73ea3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reading a file\n",
    "df = pd.read_csv(\"credit card transaction for training final..csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "008606dd-b35b-4658-9a43-5b8d91634fc4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Display all the columns \n",
    "pd.options.display.max_columns = None "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "64f7ba57-9555-4746-ba8a-ce68eb0ab199",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Unnamed: 0 trans_date_trans_time        cc_num  \\\n",
      "0           0      01/01/2019 00:00  2.703190e+15   \n",
      "1           1      01/01/2019 00:00  6.304230e+11   \n",
      "2           2      01/01/2019 00:00  3.885950e+13   \n",
      "3           3      01/01/2019 00:01  3.534090e+15   \n",
      "4           4      01/01/2019 00:03  3.755340e+14   \n",
      "\n",
      "                             merchant       category     amt      first  \\\n",
      "0          fraud_Rippin, Kub and Mann       misc_net    4.97   Jennifer   \n",
      "1     fraud_Heller, Gutmann and Zieme    grocery_pos  107.23  Stephanie   \n",
      "2                fraud_Lind-Buckridge  entertainment  220.11     Edward   \n",
      "3  fraud_Kutch, Hermiston and Farrell  gas_transport   45.00     Jeremy   \n",
      "4                 fraud_Keeling-Crist       misc_pos   41.96      Tyler   \n",
      "\n",
      "      last gender                        street            city state    zip  \\\n",
      "0    Banks      F                561 Perry Cove  Moravian Falls    NC  28654   \n",
      "1     Gill      F  43039 Riley Greens Suite 393          Orient    WA  99160   \n",
      "2  Sanchez      M      594 White Dale Suite 530      Malad City    ID  83252   \n",
      "3    White      M   9443 Cynthia Court Apt. 038         Boulder    MT  59632   \n",
      "4   Garcia      M              408 Bradley Rest        Doe Hill    VA  24433   \n",
      "\n",
      "       lat      long  city_pop                                job         dob  \\\n",
      "0  36.0788  -81.1781      3495          Psychologist, counselling  09/03/1988   \n",
      "1  48.8878 -118.2105       149  Special educational needs teacher  21/06/1978   \n",
      "2  42.1808 -112.2620      4154        Nature conservation officer  19/01/1962   \n",
      "3  46.2306 -112.1138      1939                    Patent attorney  12/01/1967   \n",
      "4  38.4207  -79.4629        99     Dance movement psychotherapist  28/03/1986   \n",
      "\n",
      "                          trans_num   unix_time  merch_lat  merch_long  \\\n",
      "0  0b242abb623afc578575680df30655b9  1325376018  36.011293  -82.048315   \n",
      "1  1f76529f8574734946361c461b024d99  1325376044  49.159047 -118.186462   \n",
      "2  a1a22d70485983eac12b5b88dad1cf95  1325376051  43.150704 -112.154481   \n",
      "3  6b849c168bdad6f867558c3793159a81  1325376076  47.034331 -112.561071   \n",
      "4  a41d7549acf90789359a9aa5346dcb46  1325376186  38.674999  -78.632459   \n",
      "\n",
      "   is_fraud  \n",
      "0         0  \n",
      "1         0  \n",
      "2         0  \n",
      "3         0  \n",
      "4         0  \n"
     ]
    }
   ],
   "source": [
    "# Display the first few rows\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "40e08310-bb42-4cbb-8d6f-669f6a08c3e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Unnamed: 0 trans_date_trans_time        cc_num  \\\n",
      "1048570     1048570      10/03/2020 16:07  6.011980e+15   \n",
      "1048571     1048571      10/03/2020 16:07  4.839040e+15   \n",
      "1048572     1048572      10/03/2020 16:08  5.718440e+11   \n",
      "1048573     1048573      10/03/2020 16:08  4.646850e+18   \n",
      "1048574     1048574      10/03/2020 16:08  2.283740e+15   \n",
      "\n",
      "                                   merchant        category     amt     first  \\\n",
      "1048570                     fraud_Fadel Inc  health_fitness   77.00     Haley   \n",
      "1048571    fraud_Cremin, Hamill and Reichel        misc_pos  116.94  Meredith   \n",
      "1048572  fraud_O'Connell, Botsford and Hand            home   21.27     Susan   \n",
      "1048573              fraud_Thompson-Gleason  health_fitness    9.52     Julia   \n",
      "1048574                 fraud_Buckridge PLC        misc_pos    6.81   Shannon   \n",
      "\n",
      "             last gender                            street           city  \\\n",
      "1048570    Wagner      F            05561 Farrell Crescent      Annapolis   \n",
      "1048571  Campbell      F               043 Hanson Turnpike        Hedrick   \n",
      "1048572     Mills      F                  005 Cody Estates     Louisville   \n",
      "1048573      Bell      F               576 House Crossroad  West Sayville   \n",
      "1048574  Williams      F  9345 Spencer Junctions Suite 183     Alpharetta   \n",
      "\n",
      "        state    zip      lat     long  city_pop  \\\n",
      "1048570    MD  21405  39.0305 -76.5515     92106   \n",
      "1048571    IA  52563  41.1826 -92.3097      1583   \n",
      "1048572    KY  40202  38.2507 -85.7476    736284   \n",
      "1048573    NY  11796  40.7320 -73.1000      4056   \n",
      "1048574    GA  30009  34.0770 -84.3033    165556   \n",
      "\n",
      "                                     job         dob  \\\n",
      "1048570  Accountant, chartered certified  28/05/1943   \n",
      "1048571                       Geochemist  28/06/1999   \n",
      "1048572            Engineering geologist  02/04/1952   \n",
      "1048573                Film/video editor  25/06/1990   \n",
      "1048574                   Prison officer  27/12/1997   \n",
      "\n",
      "                                trans_num   unix_time  merch_lat  merch_long  \\\n",
      "1048570  45ecd198c65e81e597db22e8d2ef7361  1362931649  38.779464  -76.317042   \n",
      "1048571  c00ce51c6ebb7657474a77b9e0b51f34  1362931670  41.400318  -92.726724   \n",
      "1048572  17c9dc8b2a6449ca2473726346e58e6c  1362931711  37.293339  -84.798122   \n",
      "1048573  5ca650881b48a6a38754f841c23b77ab  1362931718  39.773077  -72.213209   \n",
      "1048574  8d0a575fe635bbde12f1a2bffc126731  1362931730  33.601468  -83.891921   \n",
      "\n",
      "         is_fraud  \n",
      "1048570         0  \n",
      "1048571         0  \n",
      "1048572         0  \n",
      "1048573         0  \n",
      "1048574         0  \n"
     ]
    }
   ],
   "source": [
    "# Display the last few rows\n",
    "print(df.tail())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9bcbf3dd-0196-4fc3-b718-59247ab1ed86",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1048575 entries, 0 to 1048574\n",
      "Data columns (total 23 columns):\n",
      " #   Column                 Non-Null Count    Dtype  \n",
      "---  ------                 --------------    -----  \n",
      " 0   Unnamed: 0             1048575 non-null  int64  \n",
      " 1   trans_date_trans_time  1048575 non-null  object \n",
      " 2   cc_num                 1048575 non-null  float64\n",
      " 3   merchant               1048575 non-null  object \n",
      " 4   category               1048575 non-null  object \n",
      " 5   amt                    1048575 non-null  float64\n",
      " 6   first                  1048575 non-null  object \n",
      " 7   last                   1048575 non-null  object \n",
      " 8   gender                 1048575 non-null  object \n",
      " 9   street                 1048575 non-null  object \n",
      " 10  city                   1048575 non-null  object \n",
      " 11  state                  1048575 non-null  object \n",
      " 12  zip                    1048575 non-null  int64  \n",
      " 13  lat                    1048575 non-null  float64\n",
      " 14  long                   1048575 non-null  float64\n",
      " 15  city_pop               1048575 non-null  int64  \n",
      " 16  job                    1048575 non-null  object \n",
      " 17  dob                    1048575 non-null  object \n",
      " 18  trans_num              1048575 non-null  object \n",
      " 19  unix_time              1048575 non-null  int64  \n",
      " 20  merch_lat              1048575 non-null  float64\n",
      " 21  merch_long             1048575 non-null  float64\n",
      " 22  is_fraud               1048575 non-null  int64  \n",
      "dtypes: float64(6), int64(5), object(12)\n",
      "memory usage: 184.0+ MB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# shows the structure of the data\n",
    "print(df.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "63e13b43-1761-4d4b-900a-bc2802d5bef2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0                 int64\n",
       "trans_date_trans_time     object\n",
       "cc_num                   float64\n",
       "merchant                  object\n",
       "category                  object\n",
       "amt                      float64\n",
       "first                     object\n",
       "last                      object\n",
       "gender                    object\n",
       "street                    object\n",
       "city                      object\n",
       "state                     object\n",
       "zip                        int64\n",
       "lat                      float64\n",
       "long                     float64\n",
       "city_pop                   int64\n",
       "job                       object\n",
       "dob                       object\n",
       "trans_num                 object\n",
       "unix_time                  int64\n",
       "merch_lat                float64\n",
       "merch_long               float64\n",
       "is_fraud                   int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Shows the structure of the data\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a6a30488-2940-4100-a742-4e5e1b9146bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop unnamed column\n",
    "df.drop('Unnamed: 0', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2839323d-95c5-47e0-97b0-5f3c6a93a950",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "trans_date_trans_time    0\n",
      "cc_num                   0\n",
      "merchant                 0\n",
      "category                 0\n",
      "amt                      0\n",
      "first                    0\n",
      "last                     0\n",
      "gender                   0\n",
      "street                   0\n",
      "city                     0\n",
      "state                    0\n",
      "zip                      0\n",
      "lat                      0\n",
      "long                     0\n",
      "city_pop                 0\n",
      "job                      0\n",
      "dob                      0\n",
      "trans_num                0\n",
      "unix_time                0\n",
      "merch_lat                0\n",
      "merch_long               0\n",
      "is_fraud                 0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#show which columns have missing values\n",
    "print(df.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "924af9dc-0658-42bc-ad41-8fbc29ff579a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check if there are duplicates in the dataset \n",
    "# False = None \n",
    "# True = Duplicates exists \n",
    "df.duplicated().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "073cc1bc-94ee-45e5-a11c-e8c41a0d201e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1048575, 22)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Rows to columns\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "235ff83c-0421-4291-b95c-66222670d8b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of rows: 1048575\n",
      "Number of columns: 22\n"
     ]
    }
   ],
   "source": [
    "# Verify the number of rows and columns \n",
    "print('Number of rows: {}'.format(df.shape[0]))\n",
    "print('Number of columns: {}'.format(df.shape[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "aebc9cef-c69f-40df-a30a-18318755bf2f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             cc_num           amt           zip           lat          long  \\\n",
      "count  1.048575e+06  1.048575e+06  1.048575e+06  1.048575e+06  1.048575e+06   \n",
      "mean   4.171565e+17  7.027910e+01  4.880159e+04  3.853336e+01 -9.022626e+01   \n",
      "std    1.308811e+18  1.599518e+02  2.689804e+04  5.076852e+00  1.375858e+01   \n",
      "min    6.041621e+10  1.000000e+00  1.257000e+03  2.002710e+01 -1.656723e+02   \n",
      "25%    1.800400e+14  9.640000e+00  2.623700e+04  3.462050e+01 -9.679800e+01   \n",
      "50%    3.520550e+15  4.745000e+01  4.817400e+04  3.935430e+01 -8.747690e+01   \n",
      "75%    4.642260e+15  8.305000e+01  7.204200e+04  4.194040e+01 -8.015800e+01   \n",
      "max    4.992350e+18  2.894890e+04  9.978300e+04  6.669330e+01 -6.795030e+01   \n",
      "\n",
      "           city_pop     unix_time     merch_lat    merch_long      is_fraud  \n",
      "count  1.048575e+06  1.048575e+06  1.048575e+06  1.048575e+06  1.048575e+06  \n",
      "mean   8.905776e+04  1.344906e+09  3.853346e+01 -9.022648e+01  5.727773e-03  \n",
      "std    3.024351e+05  1.019700e+07  5.111233e+00  1.377093e+01  7.546503e-02  \n",
      "min    2.300000e+01  1.325376e+09  1.902779e+01 -1.666712e+02  0.000000e+00  \n",
      "25%    7.430000e+02  1.336682e+09  3.472954e+01 -9.689864e+01  0.000000e+00  \n",
      "50%    2.456000e+03  1.344902e+09  3.936295e+01 -8.743923e+01  0.000000e+00  \n",
      "75%    2.032800e+04  1.354366e+09  4.195602e+01 -8.023228e+01  0.000000e+00  \n",
      "max    2.906700e+06  1.362932e+09  6.751027e+01 -6.695090e+01  1.000000e+00  \n"
     ]
    }
   ],
   "source": [
    "# Statistical description of the data\n",
    "print(df.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "77ea4176-4630-4219-b29d-0d791e363b4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Converting columns to integers\n",
    "df = df.apply(lambda col: col.astype(int) if pd.api.types.is_numeric_dtype(col) and col.notnull().all() else col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5106cd78-e34e-4434-9a6c-e089ef80b9c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "is_fraud\n",
       "0    1042569\n",
       "1       6006\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check fraud distribution in the dataset\n",
    "df['is_fraud'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "94edc217-7c72-4b7b-9605-e925775778fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "is_fraud\n",
       "0    99.427223\n",
       "1     0.572777\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check fraud distribution in the dataset in %\n",
    "(df['is_fraud'].value_counts(normalize=True) * 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "496e648f-b6bc-47f9-9bb5-3ab9178b6831",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Fraud distribution countplot\n",
    "plt.figure(figsize=(6,4))\n",
    "sns.countplot(x='is_fraud', data=df)\n",
    "plt.title('Fraud Distribution')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "3f4abc69-b702-40a9-b8e5-c40500757abe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature Engineering\n",
    "# Create time-based features\n",
    "df['trans_date_trans_time'] = pd.to_datetime(df['trans_date_trans_time'], format='%d/%m/%Y %H:%M', errors='coerce')\n",
    "df['hour'] = df['trans_date_trans_time'].dt.hour\n",
    "df['day_of_week'] = df['trans_date_trans_time'].dt.dayofweek\n",
    "df['month'] = df['trans_date_trans_time'].dt.month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9f9bd060-275e-4733-9e54-10d5d42a3c71",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create transaction amount bins\n",
    "df['amt_bin'] = pd.cut(df['amt'], bins=[0, 50, 200, 500, 1000, 5000, 50000], \n",
    "                      labels=['0-50', '50-200', '200-500', '500-1000', '1000-5000', '5000+'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "23f01432-24c0-47ec-b0e3-45aa9672b4ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate distance between merchant and customer\n",
    "df['distance'] = np.sqrt((df['lat']-df['merch_lat'])**2 + (df['long']-df['merch_long'])**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "057cc148-abca-4605-ba4b-83d1b3552f61",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data Preprocessing\n",
    "# Separate features and target\n",
    "X = df.drop('is_fraud', axis=1)\n",
    "y = df['is_fraud']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9486e901-c8fc-4c10-8f87-efbcd3d0172e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Identify categorical and numerical columns\n",
    "cat_cols = ['category', 'gender', 'state', 'job', 'amt_bin']\n",
    "num_cols = ['amt', 'city_pop', 'distance', 'hour', 'day_of_week', 'month']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "81017f7e-0230-477b-8242-f651502e1b16",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create transformers\n",
    "numeric_transformer = StandardScaler()\n",
    "categorical_transformer = OneHotEncoder(handle_unknown='ignore')\n",
    "\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('num', numeric_transformer, num_cols),\n",
    "        ('cat', categorical_transformer, cat_cols)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "74ef889c-7ded-43ef-9387-061455fd3684",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Transform X using the preprocessor\n",
    "X_transformed = preprocessor.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "1e72b979-e94e-4ad5-b699-567c8bd93b71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Data visualisation\n",
    "# Histogram showing transaction amount distribution\n",
    "plt.figure(figsize=(12,8))\n",
    "sns.histplot(df['amt'], bins=100, log_scale=True)\n",
    "plt.title('Transaction Amount Distribution')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "03934482-1ec8-47cc-9c17-a047dd4986f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Correlation heatmap - showing the correlation\n",
    "s = df.select_dtypes(include = 'number').corr()\n",
    "plt.figure(figsize=(12, 8))\n",
    "sns.heatmap(s, annot=True, fmt='.2f', cmap='coolwarm', square=True, cbar=True)\n",
    "plt.title('Feature Correlation Heatmap')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "56b7836f-6f1c-479b-9f3b-8827abcc4d7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Countplot show distribution of gender by fraud \n",
    "plt.figure(figsize=(12,8))\n",
    "sns.countplot(data=df, x='gender', hue='is_fraud')\n",
    "plt.title('Gender Distribution by Fraud')\n",
    "plt.xlabel('Gender')\n",
    "plt.ylabel('Count')\n",
    "plt.legend(['Legitimate', 'Fraudulent'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c9edc6f4-d7c2-4489-899e-4b712f9478ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Countplot showing fraud by transaction category\n",
    "plt.figure(figsize=(12,8))\n",
    "sns.countplot(data=df, y='category', order=df['category'].value_counts().index, hue='is_fraud')\n",
    "plt.title('Transaction Category by Fraud')\n",
    "plt.xlabel('Transaction Count')\n",
    "plt.ylabel('Merchant Category')\n",
    "plt.legend(['Legitimate', 'Fraudulent'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "69910395-82bd-4c1d-a5bb-31522a1c53c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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9uzZcnZ21sKFC+Xq6mprj4uLu+ma/fz8rvr+FpS8ntjx5Zdfqlu3bvrggw/s2v/55x/5+vralnOO9cobqOYXBOR3PDk3UryRMfNSrFgxWSwWrV69Os97H1ztfgh3Ul7v+c6dO7V9+3bFxsbq+eeft7X/8ccft7Svtm3bqm3btjp//rw2bNig4cOHq3PnzgoODlaDBg305Zdfqly5cvrmm2/s6rry/S9evLiysrKUmpqaZ6hwo4oUKSIHBwelpKTkWpdz48vrffrM5R577DE99thjysrK0pYtWzRhwgT169dP/v7+evbZZ2+5bgC42zGDAgBw32jSpIlOnz6d64f1f//7X9v6yy1fvlx///23bTkrK0vffPONQkJCrnojwbZt26pGjRoaPny4du7cmWefJUuWXPXO+zfyL92tW7fWzp07FRISYjebIOd1eUCRw8PDQ0888YQGDhyoCxcu6Ndff813fIvFIicnJ7ubT549e1YzZ868rvryEhERke/7e7tZLJZcP+Z//PHHXJcI5AQLv/zyi117zlMdcjz88MNydXXVrFmz7NrXrVuX63KK6x0zL61bt5ZhGDp06FCen3ONGjWuOcaVrvxX+tslJxy48n3/9NNPC2R8q9WqsLAwjRw5UpK0bds2235dXFzswonU1NRcT/HIuRxq8uTJ19zP9bxXHh4eeuihhzRv3jy7/tnZ2fryyy9VunRpVaxY8foOLg+Ojo566KGHNHHiREnS1q1bb3osALiXMIMCAHDf6NatmyZOnKjnn39eycnJqlGjhtasWaMPPvhALVu21OOPP27Xv1ixYmrcuLEGDRpke4rHb7/9ds1HjTo6Omr+/Plq1qyZGjRooFdffVURERHy8PDQ/v379d133+mHH37QiRMn8h2jRo0amjdvniZPnqw6derIwcFBdevWzbPv0KFDtWzZMj3yyCPq27evKlWqpHPnzik5OVmLFi3SlClTVLp0ab300ktyc3NTw4YNFRgYqNTUVA0fPlw+Pj626/nz0qpVK40dO1adO3fWyy+/rGPHjmn06NG39C/277zzjhYsWKDGjRtr8ODBcnd318SJE5WRkXHTY16v1q1bKzY2VpUrV1bNmjWVmJioDz/8MFfoVK9ePVWqVEkDBgxQZmamihQpovnz52vNmjV2/YoUKaIBAwbovffe07///W8988wzOnjwoGJiYnJdMnC9Y+alYcOGevnll/XCCy9oy5YtatSokTw8PJSSkqI1a9aoRo0aevXVV2/ovQgJCZGbm5tmzZqlKlWqyNPTUyVLlswz1LoVlStXVkhIiN5++20ZhqGiRYvqhx9+uOblRVczePBg/fXXX2rSpIlKly6tkydP6uOPP5azs7PCwsIkXfqs582bp549e9qerjJs2DAFBgZqz549trEee+wxde3aVe+9957+/vtvtW7dWlarVdu2bZO7u7v69Okj6dJ5OXv2bH3zzTcqX768XF1d8w2Ghg8frqZNmyoiIkIDBgyQi4uLJk2apJ07d+rrr7/Oc6bJ1UyZMkUrVqxQq1atVKZMGZ07d872RJMr/9sFAPctU2/RCQDALbjyKR6GYRjHjh0zXnnlFSMwMNBwcnIyypYta0RHR+d64oYko1evXsakSZOMkJAQw9nZ2ahcubIxa9as697/yZMnjWHDhhmhoaGGp6en4ezsbJQpU8Z47rnnjLVr19r65fVkh+PHjxtPP/204evra1gsFuPy/0nWFU/xMAzDOHr0qNG3b1+jXLlyhrOzs1G0aFGjTp06xsCBA43Tp08bhmEYM2bMMCIiIgx/f3/DxcXFKFmypNGhQwfjl19+ueaxTJs2zahUqZJhtVqN8uXLG8OHDzemTp2aq+6yZcsarVq1yrV9WFhYrqcfrF271nj44YcNq9VqBAQEGG+++abx2Wef3dBTPC5/gsTlct7TzZs351p34sQJ48UXXzRKlChhuLu7G48++qixevXqPGv83//+ZzRr1szw9vY2ihcvbvTp08f48ccfcz1xIzs72xg+fLgRFBRkuLi4GDVr1jR++OGHWxrzyqd45Jg2bZrx0EMPGR4eHoabm5sREhJidOvWzdiyZYutT1hYmFGtWrVc2+Y15tdff21UrlzZcHZ2zvO7lZ/8nuJx5TmXY9euXUbTpk0NLy8vo0iRIsYzzzxjHDhwINc+8/tsrzxPFi5caDzxxBNGqVKlDBcXF6NEiRJGy5YtjdWrV9ttN2LECCM4ONiwWq1GlSpVjM8//9y2j8tlZWUZH330kVG9enXDxcXF8PHxMRo0aGD88MMPtj7JyclGs2bNDC8vL0OS7b3M6ykehmEYq1evNho3bmz7rB5++GG78S4/riu/q1c+2WX9+vXGk08+aZQtW9awWq2Gn5+fERYWZixYsCDP9xsA7kcWwzCMOxuJAABgPovFol69eumTTz4xuxQAAACIe1AAAAAAAIC7AAEFAAAAAAAwHTfJBAAUSlzhCAAAcHdhBgUAAAAAADAdAQUAAAAAADAdAQUAAAAAADAd96AoRLKzs3X48GF5eXnJYrGYXQ4AAAAA4D5nGIZOnTqlkiVLysHh6nMkCCgKkcOHDysoKMjsMgAAAAAAhczBgwdVunTpq/YhoChEvLy8JF36Ynh7e5tcDQAAAADgfpeenq6goCDb79GrIaAoRHIu6/D29iagAAAAAADcMddzmwFukgkAAAAAAExHQAEAAAAAAExHQAEAAAAAAEzHPSgKoUbvfC1Hq5vZZQAAAAD3ncQPu5ldwl3FMAxlZmYqKyvL7FJwmzg6OsrJyem67jFxLQQUAAAAAIACd+HCBaWkpOjMmTNml4LbzN3dXYGBgXJxcbmlcQgoAAAAAAAFKjs7W/v27ZOjo6NKliwpFxeXAvkXdtxdDMPQhQsXdPToUe3bt08PPPCAHBxu/k4SBBQAAAAAgAJ14cIFZWdnKygoSO7u7maXg9vIzc1Nzs7O2r9/vy5cuCBXV9ebHoubZAIAAAAAbotb+dd03DsK6nPm2wIAAAAAAExHQAEAAAAAAEzHPSgAAAAAAHdEnTf/e0f3dzc+9jU4OFj9+vVTv3798u0TExOjuLg4JSUl3bG67gbMoAAAAAAA4P9ERkaqXbt2t238zZs36+WXX7YtWywWxcXF2fUZMGCAli9ffttqyBETE6PatWvf9v1cL2ZQAAAAAABwhxQvXvyafTw9PeXp6XkHqrm7MIMCAAAAAIDrsGvXLrVs2VKenp7y9/dX165d9c8//9jWnzp1Sl26dJGHh4cCAwP10UcfKTw83O5yjuDgYI0bN872tyQ9+eSTslgstuUrZzbkzOr44IMP5O/vL19fXw0ZMkSZmZl68803VbRoUZUuXVrTpk2zq/ett95SxYoV5e7urvLly2vQoEG6ePGiJCk2NlZDhgzR9u3bZbFYZLFYFBsbK0lKS0vTyy+/rBIlSsjb21uNGzfW9u3bC/S9zAsBBQAAAAAA15CSkqKwsDDVrl1bW7Zs0eLFi/X333+rQ4cOtj5vvPGG1q5dqwULFmjZsmVavXq1tm7dmu+YmzdvliRNnz5dKSkptuW8rFixQocPH9aqVas0duxYxcTEqHXr1ipSpIg2btyoV155Ra+88ooOHjxo28bLy0uxsbHatWuXPv74Y33++ef66KOPJEkdO3ZU//79Va1aNaWkpCglJUUdO3aUYRhq1aqVUlNTtWjRIiUmJio0NFRNmjTR8ePHb/VtvCou8QAAAAAA4BomT56s0NBQffDBB7a2adOmKSgoSP/73/8UGBioGTNm6KuvvlKTJk0kXQoeSpYsme+YOZd7+Pr6KiAg4Kr7L1q0qMaPHy8HBwdVqlRJo0aN0pkzZ/Sf//xHkhQdHa0RI0Zo7dq1evbZZyVJ77zzjm374OBg9e/fX998842ioqLk5uYmT09POTk52e17xYoV2rFjh44cOSKr1SpJGj16tOLi4vTdd9/Z3T+joBFQAAAAAABwDYmJiYqPj8/z3hB79+7V2bNndfHiRdWvX9/W7uPjo0qVKhXI/qtVqyYHh/9/EYS/v7+qV69uW3Z0dJSfn5+OHDlia/vuu+80btw4/fHHHzp9+rQyMzPl7e191f0kJibq9OnT8vPzs2s/e/as9u7dWyDHkh8CCgAAAAAAriE7O1tt2rTRyJEjc60LDAzUnj17JF16KsflDMMokP07OzvbLVssljzbsrOzJUkbNmzQs88+qyFDhqh58+by8fHR7NmzNWbMmKvuJzs7W4GBgUpISMi1ztfX95aO4VoIKAAAAAAAuIbQ0FDNnTtXwcHBcnLK/VM6JCREzs7O2rRpk4KCgiRJ6enp2rNnj8LCwvId19nZWVlZWQVe79q1a1W2bFkNHDjQ1rZ//367Pi4uLrn2HRoaqtTUVDk5Odlu2nmncJNMAAAAAAAuk5aWpqSkJLtXjx49dPz4cXXq1EmbNm3Sn3/+qaVLl6p79+7KysqSl5eXnn/+eb355puKj4/Xr7/+qu7du8vBwSHXrIrLBQcHa/ny5UpNTdWJEycK7BgqVKigAwcOaPbs2dq7d6/Gjx+v+fPn59r3vn37lJSUpH/++Ufnz5/X448/rgYNGqhdu3ZasmSJkpOTtW7dOr3zzjvasmVLgdWXF2ZQAAAAAADuiMQPu5ldwnVJSEjQgw8+aNf2/PPPa+3atXrrrbfUvHlznT9/XmXLllWLFi1s94YYO3asXnnlFbVu3Vre3t6KiorSwYMH5erqmu++xowZozfeeEOff/65SpUqpeTk5AI5hrZt2+r1119X7969df78ebVq1UqDBg1STEyMrU/79u01b948RURE6OTJk5o+fboiIyO1aNEiDRw4UN27d9fRo0cVEBCgRo0ayd/fv0Bqy4/FKKgLYnDXS09Pl4+Pj2r1mSJHq5vZ5QAAAAD3nXvlB/jtdu7cOe3bt0/lypW76o/z+11GRoZKlSqlMWPG6MUXXzS7nNvmap93zu/QtLS0a96gkxkUAAAAAAAUgG3btum3335T/fr1lZaWpqFDh0q6NJsB10ZAAQAAAABAARk9erR+//13ubi4qE6dOlq9erWKFStmdln3hEJ7k8zU1FT16dNH5cuXl9VqVVBQkNq0aaPly5ebXRoAAAAA4B704IMPKjExUadPn9bx48e1bNky1ahRw+yy7hmFcgZFcnKyGjZsKF9fX40aNUo1a9bUxYsXtWTJEvXq1Uu//fab2SUCAAAAAFCoFMoZFD179pTFYtGmTZv09NNPq2LFiqpWrZreeOMNbdiwQZJ04MABtW3bVp6envL29laHDh30999/28aIiYlR7dq1NXPmTAUHB8vHx0fPPvusTp06JUn64Ycf5Ovrq+zsbElSUlKSLBaL3nzzTdsYPXr0UKdOnSRJx44dU6dOnVS6dGm5u7urRo0a+vrrr219//vf/8rPz0/nz5+3O5b27durWzduxAMAAAAAuLcVuoDi+PHjWrx4sXr16iUPD49c6319fWUYhtq1a6fjx49r5cqVWrZsmfbu3auOHTva9d27d6/i4uK0cOFCLVy4UCtXrtSIESMkSY0aNdKpU6e0bds2SdLKlStVrFgxrVy50rZ9QkKCwsLCJF2662mdOnW0cOFC7dy5Uy+//LK6du2qjRs3SpKeeeYZZWVlacGCBbbt//nnHy1cuFAvvPBCnsd6/vx5paen270AAAAAALgbFbpLPP744w8ZhqHKlSvn2+fnn3/WL7/8on379ikoKEiSNHPmTFWrVk2bN29WvXr1JEnZ2dmKjY2Vl5eXJKlr165avny53n//ffn4+Kh27dpKSEhQnTp1lJCQoNdff11DhgzRqVOnlJGRof/9738KDw+XJJUqVUoDBgyw1dCnTx8tXrxY3377rR566CG5ubmpc+fOmj59up555hlJ0qxZs1S6dGnbGFcaPny4hgwZkqt9lufH8nJ1lCSVGbzjxt5AAAAAAABug0I3g8IwDEmSxWLJt8/u3bsVFBRkCyckqWrVqvL19dXu3bttbcHBwbZwQpICAwN15MgR23J4eLgSEhJkGIZWr16ttm3bqnr16lqzZo3i4+Pl7+9vC0qysrL0/vvvq2bNmvLz85Onp6eWLl2qAwcO2MZ76aWXtHTpUh06dEiSNH36dEVGRuZ7LNHR0UpLS7O9Dh48eCNvFQAAAAAAd0yhCygeeOABWSwWu6DhSoZh5Pmj/8p2Z2dnu/UWi8V2zwnpUkCxevVqbd++XQ4ODqpatarCwsK0cuVKu8s7JGnMmDH66KOPFBUVpRUrVigpKUnNmzfXhQsXbH0efPBB1apVS//973+1detW7dixQ5GRkfkeh9Vqlbe3t90LAAAAAIC7UaG7xKNo0aJq3ry5Jk6cqL59++a6D8XJkydVtWpVHThwQAcPHrTNoti1a5fS0tJUpUqV695Xzn0oxo0bp7CwMFksFoWFhWn48OE6ceKEXnvtNVvfnBkWzz33nKRLl4/s2bMn1/7+/e9/66OPPtKhQ4f0+OOP283yAAAAAIC72YGhd/aRm/fyJe2RkZE6efKk4uLirnsbi8Wi+fPnq127dretrtup0M2gkKRJkyYpKytL9evX19y5c7Vnzx7t3r1b48ePV4MGDfT444+rZs2a6tKli7Zu3apNmzapW7duCgsLU926da97Pzn3ofjyyy9t94lo1KiRtm7danf/CUmqUKGCli1bpnXr1mn37t3q0aOHUlNTc43ZpUsXHTp0SJ9//rm6d+9+q28FAAAAAOAyOZfRX/n6448/zC7NFMHBwRo3btwd2VehDCjKlSunrVu3KiIiQv3791f16tXVtGlTLV++XJMnT5bFYlFcXJyKFCmiRo0a6fHHH1f58uX1zTff3PC+IiIilJWVZQsjihQpoqpVq6p48eJ2syMGDRqk0NBQNW/eXOHh4QoICMgz9fL29lb79u3l6el5z6ZiAAAAAHA3a9GihVJSUuxe5cqVs+tz+eX4KBiFMqCQLt3Q8pNPPlFycrLOnz+vv/76S99//70tSChTpoy+//57nT59Wunp6ZozZ478/f1t28fExCgpKcluzH79+ik5OdmubfTo0TIMQ9WqVbO1JSUl6ciRI3b3syhatKji4uJ06tQp/f333xo2bJhmzJiR53SelJQUdenSRVar9ZbfBwAAAACAPavVqoCAALtXkyZN1Lt3b73xxhsqVqyYmjZtKkkaO3asatSoIQ8PDwUFBalnz546ffq0bayYmBjVrl3bbvxx48YpODjYtpyVlaU33nhDvr6+8vPzU1RUlO0BDznymslQu3ZtxcTE5Hschw4dUseOHVWkSBH5+fmpbdu2dr9ZIyMj1a5dO40ePVqBgYHy8/NTr169dPHiRUmX7qu4f/9+vf7667aZJLdToQ0o7kXHjx/X7NmztWLFCvXq1cvscgAAAACgUJkxY4acnJy0du1affrpp5IkBwcHjR8/Xjt37tSMGTO0YsUKRUVF3dC4Y8aM0bRp0zR16lStWbNGx48f1/z582+p1jNnzigiIkKenp5atWqV1qxZI09PT7Vo0cJu9kd8fLz27t2r+Ph4zZgxQ7GxsYqNjZUkzZs3T6VLl9bQoUNtM0lup0J3k8x7WWhoqE6cOKGRI0eqUqVKZpcDAAAAAPelhQsXytPT07b8xBNPSLp078BRo0bZ9e3Xr5/t73LlymnYsGF69dVXNWnSpOve37hx4xQdHa327dtLkqZMmaIlS5bcwhFIs2fPloODg7744gvbzIfp06fL19dXCQkJatasmaRLtyH45JNP5OjoqMqVK6tVq1Zavny5XnrpJRUtWlSOjo7y8vJSQEDALdVzPQgo7iFXXj4CAAAAACh4ERERmjx5sm3Zw8NDnTp1yvOhCfHx8frggw+0a9cupaenKzMzU+fOnVNGRkaup0bmJS0tTSkpKWrQoIGtzcnJSXXr1s11mceNSExM1B9//CEvLy+79nPnzmnv3r225WrVqsnR0dG2HBgYqB07zHn6CQEFAAAAAACX8fDwUIUKFfJsv9z+/fvVsmVLvfLKKxo2bJiKFi2qNWvW6MUXX7Tdx8HBwSFX0JCz7kbc6DjZ2dmqU6eOZs2alWtd8eLFbX87OzvbrbNYLMrOzr7h+goCAQUAAAAAADdhy5YtyszM1JgxY+TgcOkWj3PmzLHrU7x4caWmpsowDNulFpc/cMHHx0eBgYHasGGDGjVqJEnKzMxUYmKiQkND7ca5/B4Q6enp2rdvX761hYaG6ptvvlGJEiXk7e1908fo4uKirKysm97+RnCTTAAAAAAAbkJISIgyMzM1YcIE/fnnn5o5c6amTJli1yc8PFxHjx7VqFGjtHfvXk2cOFE//fSTXZ/XXntNI0aM0Pz58/Xbb7+pZ8+eOnnypF2fxo0ba+bMmVq9erV27typ559/3u7SjCt16dJFxYoVU9u2bbV69Wrt27dPK1eu1Guvvaa//vrruo8xODhYq1at0qFDh/TPP/9c93Y3gxkUAAAAAIA7osxgc+5tcLvUrl1bY8eO1ciRIxUdHa1GjRpp+PDh6tatm61PlSpVNGnSJH3wwQcaNmyY2rdvrwEDBuizzz6z9enfv79SUlIUGRkpBwcHde/eXU8++aTS0tJsfaKjo/Xnn3+qdevW8vHx0bBhw646g8Ld3V2rVq3SW2+9paeeekqnTp1SqVKl1KRJkxuaUTF06FD16NFDISEhOn/+/C3dF+NaLMbtHB13lfT0dPn4+GhndBV5uV5K2u63/0AAAAAAMN+5c+e0b98+lStXTq6urmaXg9vsap93zu/QtLS0awYjXOIBAAAAAABMR0ABAAAAAABMR0ABAAAAAABMR0ABAAAAAABMR0ABAAAAALgteCZD4VBQnzMBBQAAAACgQDk7O0uSzpw5Y3IluBNyPuecz/1mORVEMQAAAAAA5HB0dJSvr6+OHDkiSXJ3d5fFYjG5KhQ0wzB05swZHTlyRL6+vnJ0dLyl8QgoAAAAAAAFLiAgQJJsIQXuX76+vrbP+1YQUAAAAAAACpzFYlFgYKBKlCihixcvml0ObhNnZ+dbnjmRg4CiEAp6e4O8vb3NLgMAAABAIeDo6FhgP2Bxf+MmmQAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHROZheAO6/RO1/L0epmdhkAAAAACrHED7uZXQLuMsygAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgMJHFYlFcXJzZZQAAAAAAYDoCilsUHh6ufv365WqPi4uTxWKRJMXExKh27dq5+qSkpOiJJ564zRUCAAAAAHD3czK7gMIsICDA7BIAAAAAALgrMIPiNouNjdWQIUO0fft2WSwWWSwWxcbGSsp9icdff/2lZ599VkWLFpWHh4fq1q2rjRs3SpL27t2rtm3byt/fX56enqpXr55+/vlnE44IAAAAAICCxwyK26xjx47auXOnFi9ebAsUfHx8cvU7ffq0wsLCVKpUKS1YsEABAQHaunWrsrOzbetbtmyp9957T66urpoxY4batGmj33//XWXKlMlz3+fPn9f58+dty+np6bfhCAEAAAAAuHUEFLeZm5ubPD095eTkdNVLOr766isdPXpUmzdvVtGiRSVJFSpUsK2vVauWatWqZVt+7733NH/+fC1YsEC9e/fOc8zhw4dryJAhudpneX4sL1dH23KZwTtu+LgAAAAAAChIXOJxl0hKStKDDz5oCyeulJGRoaioKFWtWlW+vr7y9PTUb7/9pgMHDuQ7ZnR0tNLS0myvgwcP3q7yAQAAAAC4JcyguEXe3t5KS0vL1X7y5El5e3tf9zhubm5XXf/mm29qyZIlGj16tCpUqCA3Nzc9/fTTunDhQr7bWK1WWa3W664BAAAAAACzMIPiFlWuXFlbtmzJ1b5582ZVqlRJkuTi4qKsrKyrjlOzZk0lJSXp+PHjea5fvXq1IiMj9eSTT6pGjRoKCAhQcnLyLdcPAAAAAMDdgIDiFvXs2VN79+5Vr169tH37dv3vf//TxIkTNXXqVL355puSpODgYO3bt09JSUn6559/7G5cmaNTp04KCAhQu3bttHbtWv3555+aO3eu1q9fL+nS/SjmzZunpKQkbd++XZ07d7bdQBMAAAAAgHsdAcUtCg4O1urVq7V37141a9ZM9erVU2xsrGJjY/XMM89Iktq3b68WLVooIiJCxYsX19dff51rHBcXFy1dulQlSpRQy5YtVaNGDY0YMUKOjpduZvnRRx+pSJEieuSRR9SmTRs1b95coaGhd/RYAQAAAAC4XSyGYRhmF4E7Iz09XT4+PtoZXYWneAAAAAAAbruc36FpaWnXvE8jMygAAAAAAIDpCCgAAAAAAIDpCCgAAAAAAIDpCCgAAAAAAIDpCCgAAAAAAIDpCCgAAAAAAIDpCCgAAAAAAIDpCCgAAAAAAIDpCCgAAAAAAIDpCCgAAAAAAIDpCCgAAAAAAIDpCCgAAAAAAIDpCCgAAAAAAIDpCCgAAAAAAIDpCCgAAAAAAIDpCCgAAAAAAIDpCCgAAAAAAIDpCCgAAAAAAIDpnMwuAHde0Nsb5O3tbXYZAAAAAADYMIMCAAAAAACYjoACAAAAAACYjoACAAAAAACYjoACAAAAAACYjoACAAAAAACYjoACAAAAAACYjoACAAAAAACYjoACAAAAAACYjoACAAAAAACYjoACAAAAAACYjoACAAAAAACYzsnsAnDnNXrnazla3cwuAwAAAABySfywm9klwCTMoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoLhCQkKCLBaLTp48aXYpCg8PV79+/cwuAwAAAACA265QBhSRkZGyWCyyWCxydnZW+fLlNWDAAGVkZJhdmp158+Zp2LBhZpcBAAAAAMBt52R2AWZp0aKFpk+frosXL2r16tX697//rYyMDHXs2NHs0myKFi1qdgkAAAAAANwRhXIGhSRZrVYFBAQoKChInTt3VpcuXRQXF2dbn5iYqLp168rd3V2PPPKIfv/9d7vtJ0+erJCQELm4uKhSpUqaOXOm3fq0tDS9/PLLKlGihLy9vdW4cWNt377dtj4mJka1a9fWzJkzFRwcLB8fHz377LM6deqUrc/ll3j89ttvcnd311dffWVbP2/ePLm6umrHjh0F+M4AAAAAAHDnFdqA4kpubm66ePGibXngwIEaM2aMtmzZIicnJ3Xv3t22bv78+XrttdfUv39/7dy5Uz169NALL7yg+Ph4SZJhGGrVqpVSU1O1aNEiJSYmKjQ0VE2aNNHx48dt4+zdu1dxcXFauHChFi5cqJUrV2rEiBF51le5cmWNHj1aPXv21P79+3X48GG99NJLGjFihGrUqJHnNufPn1d6errdCwAAAACAu5HFMAzD7CLutMjISJ08edI2Y2LTpk1q2bKlmjRpoldffVURERH6+eef1aRJE0nSokWL1KpVK509e1aurq5q2LChqlWrps8++8w2ZocOHZSRkaEff/xRK1as0JNPPqkjR47IarXa+lSoUEFRUVF6+eWXFRMTow8//FCpqany8vKSJEVFRWnVqlXasGGDpEszKGrXrq1x48bZxmjdurXS09Pl4uIiBwcHLVmyRBaLJc/jjImJ0ZAhQ3K1p6Wlydvb+5beQwAAAAAAriU9PV0+Pj7X9Tu00M6gWLhwoTw9PeXq6qoGDRqoUaNGmjBhgm19zZo1bX8HBgZKko4cOSJJ2r17txo2bGg3XsOGDbV7925Jly4POX36tPz8/OTp6Wl77du3T3v37rVtExwcbAsncvaTs4/8TJs2Tb/88ou2bt2q2NjYfMMJSYqOjlZaWprtdfDgwWu9LQAAAAAAmKLQ3iQzIiJCkydPlrOzs0qWLClnZ2dJ0q5duyTJtizJFgJkZ2fnasthGIZdv8DAQCUkJOTar6+vr+3vy/eRM+bl+8jL9u3blZGRIQcHB6WmpqpkyZL59rVarXYzOAAAAAAAuFsV2oDCw8NDFSpUuKltq1SpojVr1qhbt262tnXr1qlKlSqSpNDQUKWmpsrJyUnBwcEFUa4k6fjx44qMjNTAgQOVmpqqLl26aOvWrXJzcyuwfQAAAAAAYIZCG1DcijfffFMdOnSw3fjyhx9+0Lx58/Tzzz9Lkh5//HE1aNBA7dq108iRI1WpUiUdPnxYixYtUrt27VS3bt2b2u8rr7yioKAgvfPOO7pw4YJCQ0M1YMAATZw4sSAPDwAAAACAO46A4ia0a9dOH3/8sT788EP17dtX5cqV0/Tp0xUeHi7p0qUaixYt0sCBA9W9e3cdPXpUAQEBatSokfz9/W9qn//973+1aNEibdu2TU5OTnJyctKsWbP0yCOPqFWrVmrZsmUBHiEAAAAAAHdWoXyKR2F1I3dPBQAAAADgVvEUDwAAAAAAcE8hoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKZzMrsA3HmN3vlajlY3s8sAAAAAgHwlftjN7BJwhzGDAgAAAAAAmI6AAgAAAAAAmI6AAgAAAAAAmI6AAgAAAAAAmI6AAgAAAAAAmI6AAgAAAAAAmI6AAgAAAAAAmI6AAgAAAAAAmI6AAgAAAAAAmI6AAgAAAAAAmI6AAgAAAAAAmI6AAgAAAAAAmI6AAgAAAAAAmI6AAgAAAAAAmI6AAgAAAAAAmI6AAgAAAAAAmI6AAgAAAAAAmI6AAgAAAAAAmI6A4i6WkJAgi8WikydPml0KAAAAAAC3lekBxZEjR9SjRw+VKVNGVqtVAQEBat68udavX3/HamjWrJkcHR21YcOGm9reYrEoLi6uYIuS9MgjjyglJUU+Pj4FPjYAAAAAAHcTJ7MLaN++vS5evKgZM2aofPny+vvvv7V8+XIdP378juz/wIEDWr9+vXr37q2pU6fq4YcfviP7vR4uLi4KCAgwuwwAAAAAAG47U2dQnDx5UmvWrNHIkSMVERGhsmXLqn79+oqOjlarVq1s/caOHasaNWrIw8NDQUFB6tmzp06fPm1bHxsbK19fXy1ZskRVqlSRp6enWrRooZSUlGvWMH36dLVu3VqvvvqqvvnmG2VkZNitDw8PV9++fRUVFaWiRYsqICBAMTExtvXBwcGSpCeffFIWi8W2LEmTJ09WSEiIXFxcVKlSJc2cOdNubIvFoi+++EJPPvmk3N3d9cADD2jBggW29Xld4jF37lxVq1ZNVqtVwcHBGjNmzDWPEQAAAACAu52pAYWnp6c8PT0VFxen8+fP59vPwcFB48eP186dOzVjxgytWLFCUVFRdn3OnDmj0aNHa+bMmVq1apUOHDigAQMGXHX/hmFo+vTpeu6551S5cmVVrFhRc+bMydVvxowZ8vDw0MaNGzVq1CgNHTpUy5YtkyRt3rxZ0qWgIyUlxbY8f/58vfbaa+rfv7927typHj166IUXXlB8fLzd2EOGDFGHDh30yy+/qGXLlurSpUu+s0cSExPVoUMHPfvss9qxY4diYmI0aNAgxcbG5tn//PnzSk9Pt3sBAAAAAHA3shiGYZhZwNy5c/XSSy/p7NmzCg0NVVhYmJ599lnVrFkz322+/fZbvfrqq/rnn38kXZpB8cILL+iPP/5QSEiIJGnSpEkaOnSoUlNT8x1n2bJl6tKliw4fPiwnJyeNGzdO3333ndasWWPrEx4erqysLK1evdrWVr9+fTVu3FgjRoyQdGkmxPz589WuXTtbn4YNG6patWr67LPPbG0dOnRQRkaGfvzxR9t277zzjoYNGyZJysjIkJeXlxYtWqQWLVooISFBEREROnHihHx9fdWlSxcdPXpUS5cutY0ZFRWlH3/8Ub/++muu44uJidGQIUNyte+MriIvV0fbcpnBO/J9jwAAAAAAuFnp6eny8fFRWlqavL29r9rX9Jtktm/fXocPH9aCBQvUvHlzJSQkKDQ01G5WQHx8vJo2bapSpUrJy8tL3bp107Fjx+wux3B3d7eFE5IUGBioI0eOXHXfU6dOVceOHeXkdOlWHJ06ddLGjRv1+++/2/W7Miy5nrF3796thg0b2rU1bNhQu3fvzndsDw8PeXl55Tt2fmPu2bNHWVlZufpHR0crLS3N9jp48OBVawYAAAAAwCymBxSS5OrqqqZNm2rw4MFat26dIiMj9e6770qS9u/fr5YtW6p69eqaO3euEhMTNXHiREnSxYsXbWM4OzvbjWmxWHS1ySHHjx9XXFycJk2aJCcnJzk5OalUqVLKzMzUtGnT7PrmNXZ2dvY1j8tisdgtG4aRq+1Gxs5r+6sdo9Vqlbe3t90LAAAAAIC70V0RUFypatWqttkRW7ZsUWZmpsaMGaOHH35YFStW1OHDh295H7NmzVLp0qW1fft2JSUl2V7jxo3TjBkzlJmZed1jOTs755rBUKVKFbtLRSRp3bp1qlKlyk3XXLVq1TzHrFixohwdHfPZCgAAAACAu5+pjxk9duyYnnnmGXXv3l01a9aUl5eXtmzZolGjRqlt27aSpJCQEGVmZmrChAlq06aN1q5dqylTptzyvqdOnaqnn35a1atXt2svW7as3nrrLf3444+2Gq4lODhYy5cvV8OGDWW1WlWkSBG9+eab6tChg0JDQ9WkSRP98MMPmjdvnn7++eebrrl///6qV6+ehg0bpo4dO2r9+vX65JNPNGnSpJseEwAAAACAu4HpT/F46KGH9NFHH6lRo0aqXr26Bg0apJdeekmffPKJJKl27doaO3asRo4cqerVq2vWrFkaPnz4Le03MTFR27dvV/v27XOt8/LyUrNmzTR16tTrHm/MmDFatmyZgoKC9OCDD0qS2rVrp48//lgffvihqlWrpk8//VTTp09XeHj4TdcdGhqqOXPmaPbs2apevboGDx6soUOHKjIy8qbHBAAAAADgbmD6Uzxw5+TcPZWneAAAAAAA7oR76ikeAAAAAAAABBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0TmYXgDsv6O0N8vb2NrsMAAAAAABsmEEBAAAAAABMR0ABAAAAAABMR0ABAAAAAABMR0ABAAAAAABMR0ABAAAAAABMR0ABAAAAAABMR0ABAAAAAABMR0ABAAAAAABMR0ABAAAAAABMR0ABAAAAAABMR0ABAAAAAABM52R2AbjzGr3ztRytbmaXAQAAANzTEj/sZnYJwH2FGRQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBSSpkyZIi8vL2VmZtraTp8+LWdnZz322GN2fVevXi2LxaL//e9/d7pMAAAAAADuWwQUkiIiInT69Glt2bLF1rZ69WoFBARo8+bNOnPmjK09ISFBJUuWVMWKFW9oH4Zh2AUgOS5cuHDzhQMAAAAAcJ8goJBUqVIllSxZUgkJCba2hIQEtW3bViEhIVq3bp1de0REhL788kvVrVtXXl5eCggIUOfOnXXkyBG7fhaLRUuWLFHdunVltVq1evVqhYeHq3fv3nrjjTdUrFgxNW3aVJK0a9cutWzZUp6envL391fXrl31zz//2MYLDw9X3759FRUVpaJFiyogIEAxMTG3/b0BAAAAAOBOIKD4P+Hh4YqPj7ctx8fHKzw8XGFhYbb2CxcuaP369YqIiNCFCxc0bNgwbd++XXFxcdq3b58iIyNzjRsVFaXhw4dr9+7dqlmzpiRpxowZcnJy0tq1a/Xpp58qJSVFYWFhql27trZs2aLFixfr77//VocOHezGmjFjhjw8PLRx40aNGjVKQ4cO1bJly/I9pvPnzys9Pd3uBQAAAADA3chiGIZhdhF3g88//1yvv/66Tp48qbNnz6po0aI6dOiQ4uPjNX78eK1du1arVq1SWFiY9u7dq/Lly9ttv3nzZtWvX1+nTp2Sp6enbaZFXFyc2rZta+sXHh6utLQ0bdu2zdY2ePBgbdy4UUuWLLG1/fXXXwoKCtLvv/+uihUrKjw8XFlZWVq9erWtT/369dW4cWONGDEiz2OKiYnRkCFDcrXvjK4iL1fHXO1lBu+4/jcMAAAAAIBrSE9Pl4+Pj9LS0uTt7X3Vvsyg+D8RERHKyMjQ5s2btXr1alWsWFElSpRQWFiYNm/erIyMDCUkJKhMmTIqX768tm3bprZt26ps2bLy8vJSeHi4JOnAgQN249atWzfXvq5sS0xMVHx8vDw9PW2vypUrS5L27t1r65czAyNHYGCg3WUlV4qOjlZaWprtdfDgwRt6TwAAAAAAuFOczC7gblGhQgWVLl1a8fHxOnHihMLCwiRJAQEBKleunNauXav4+Hg1btxYGRkZatasmZo1a6Yvv/xSxYsX14EDB9S8efNcN7308PDIta8r27Kzs9WmTRuNHDkyV9/AwEDb387OznbrLBaLsrOz8z0mq9Uqq9V67YMHAAAAAMBkBBSXiYiIUEJCgk6cOKE333zT1h4WFqYlS5Zow4YNeuGFF/Tbb7/pn3/+0YgRIxQUFCRJdk8AuVGhoaGaO3eugoOD5eTERwIAAAAAKHy4xOMyERERWrNmjZKSkmwzKKRLAcXnn3+uc+fOKSIiQmXKlJGLi4smTJigP//8UwsWLNCwYcNuer+9evXS8ePH1alTJ23atEl//vmnli5dqu7duysrK6sgDg0AAAAAgLsaAcVlIiIidPbsWVWoUEH+/v629rCwMJ06dUohISEKCgpS8eLFFRsbq2+//VZVq1bViBEjNHr06Jveb8mSJbV27VplZWWpefPmql69ul577TX5+PjIwYGPCAAAAABw/+MpHoVIzt1TeYoHAAAAAOBO4CkeAAAAAADgnkJAAQAAAAAATEdAAQAAAAAATEdAAQAAAAAATEdAAQAAAAAATEdAAQAAAAAATEdAAQAAAAAATEdAAQAAAAAATEdAAQAAAAAATEdAAQAAAAAATEdAAQAAAAAATEdAAQAAAAAATEdAAQAAAAAATHdTAUV4eLj++9//6uzZswVdDwAAAAAAKIRuKqCoU6eOoqKiFBAQoJdeekkbNmwo6LoAAAAAAEAhclMBxZgxY3To0CH997//1dGjR9WoUSNVrVpVo0eP1t9//13QNQIAAAAAgPvcTd+DwtHRUW3btlVcXJwOHTqkzp07a9CgQQoKClK7du20YsWKgqwTAAAAAADcx275JpmbNm3S4MGDNXr0aJUoUULR0dEqUaKE2rRpowEDBhREjQAAAAAA4D5nMQzDuNGNjhw5opkzZ2r69Onas2eP2rRpo3//+99q3ry5LBaLJOnnn39Wu3btdPr06QIvGjcnPT1dPj4+SktLk7e3t9nlAAAAAADuczfyO9TpZnZQunRphYSEqHv37oqMjFTx4sVz9alfv77q1at3M8MDAAAAAIBC5qYCiuXLl+uxxx67ah9vb2/Fx8ffVFEAAAAAAKBwual7ULz77rs6efJkrvb09HQ1btz4VmsCAAAAAACFzE0FFCtXrtSFCxdytZ87d06rV6++5aIAAAAAAEDhckOXePzyyy+SJMMwtGvXLqWmptrWZWVlafHixSpVqlTBVggAAAAAAO57NxRQ1K5dWxaLRRaLJc9LOdzc3DRhwoQCKw4AAAAAABQONxRQ7Nu3T4ZhqHz58tq0aZPd0ztcXFxUokQJOTo6FniRAAAAAADg/nZDAUXZsmUlSdnZ2belGAAAAAAAUDhdd0CxYMECPfHEE3J2dtaCBQuu2vdf//rXLRcGAAAAAAAKD4thGMb1dHRwcFBqaqpKlCghB4f8H/5hsViUlZVVYAWi4KSnp8vHx0dpaWny9vY2uxwAAAAAwH3uRn6HXvcMissv6+ASDwAAAAAAUJBu6B4UK1asUO/evbVhw4ZcyUdaWpoeeeQRTZkyRY899liBFomC1eidr+VodTO7DAAAAAC4qsQPu5ldAu6g/K/VyMO4ceP00ksv5Tktw8fHRz169NDYsWMLrDgAAAAAAFA43FBAsX37drVo0SLf9c2aNVNiYuItFwUAAAAAAAqXGwoo/v77bzk7O+e73snJSUePHr3logAAAAAAQOFyQwFFqVKltGPHjnzX//LLLwoMDLzlogAAAAAAQOFyQwFFy5YtNXjwYJ07dy7XurNnz+rdd99V69atC6w4AAAAAABQONzQUzzeeecdzZs3TxUrVlTv3r1VqVIlWSwW7d69WxMnTlRWVpYGDhx4u2oFAAAAAAD3qRsKKPz9/bVu3Tq9+uqrio6OlmEYkiSLxaLmzZtr0qRJ8vf3vy2FAgAAAACA+9cNBRSSVLZsWS1atEgnTpzQH3/8IcMw9MADD6hIkSK3oz4AAAAAAFAI3HBAkaNIkSKqV69eQdYCAAAAAAAKqRu6SSYAAAAAAMDtQEABAAAAAABMR0ABAAAAAABMR0ABAAAAAABMR0ABAAAAAABMR0ABAAAAAABMR0ABAAAAAABMR0ABAAAAAABMR0ABAAAAAABMR0ABAAAAAABMR0BRAGJiYlS7du2r9omMjFS7du1sy+Hh4erXr99trQsAAAAAgHvFfR9QREZGymKx6JVXXsm1rmfPnrJYLIqMjLylfQwYMEDLly+/oW3mzZunYcOG3dJ+AQAAAAC4X9z3AYUkBQUFafbs2Tp79qyt7dy5c/r6669VpkyZmx7XMAxlZmbK09NTfn5+N7Rt0aJF5eXlddP7BgAAAADgflIoAorQ0FCVKVNG8+bNs7XNmzdPQUFBevDBB21thmFo1KhRKl++vNzc3FSrVi199913tvUJCQmyWCxasmSJ6tatK6vVqtWrV+e6xCMrK0tvvPGGfH195efnp6ioKBmGYVfTlZd4fPnll6pbt668vLwUEBCgzp0768iRI7n2vXz5ctWtW1fu7u565JFH9PvvvxfgOwUAAAAAgDkKRUAhSS+88IKmT59uW542bZq6d+9u1+edd97R9OnTNXnyZP366696/fXX9dxzz2nlypV2/aKiojR8+HDt3r1bNWvWzLWvMWPGaNq0aZo6darWrFmj48ePa/78+Vet78KFCxo2bJi2b9+uuLg47du3L89LTwYOHKgxY8Zoy5YtcnJyynUMlzt//rzS09PtXgAAAAAA3I2czC7gTunatauio6OVnJwsi8WitWvXavbs2UpISJAkZWRkaOzYsVqxYoUaNGggSSpfvrzWrFmjTz/9VGFhYbaxhg4dqqZNm+a7r3Hjxik6Olrt27eXJE2ZMkVLliy5an2XBw3ly5fX+PHjVb9+fZ0+fVqenp62de+//76tlrffflutWrXSuXPn5OrqmmvM4cOHa8iQIbnaZ3l+LC9XR5UZvOOqNQEAAAAAcKcUmoCiWLFiatWqlWbMmCHDMNSqVSsVK1bMtn7Xrl06d+5cruDhwoULdpeBSFLdunXz3U9aWppSUlJsIYckOTk5qW7durku87jctm3bFBMTo6SkJB0/flzZ2dmSpAMHDqhq1aq2fpfP2AgMDJQkHTlyJM97aURHR+uNN96wLaenpysoKCjfGgAAAAAAMEuhCSikS7MUevfuLUmaOHGi3bqcQODHH39UqVKl7NZZrVa7ZQ8PjwKtKyMjQ82aNVOzZs305Zdfqnjx4jpw4ICaN2+uCxcu2PV1dna2/W2xWOxqv5LVas1VOwAAAAAAd6NCFVC0aNHC9oO/efPmduuqVq0qq9WqAwcO2F3OcaN8fHwUGBioDRs2qFGjRpKkzMxMJSYmKjQ0NM9tfvvtN/3zzz8aMWKEbYbDli1bbroGAAAAAADuNYUqoHB0dNTu3bttf1/Oy8tLAwYM0Ouvv67s7Gw9+uijSk9P17p16+Tp6annn3/+uvfz2muvacSIEXrggQdUpUoVjR07VidPnsy3f5kyZeTi4qIJEybolVde0c6dOzVs2LCbOkYAAAAAAO5FhSqgkCRvb+981w0bNkwlSpTQ8OHD9eeff8rX11ehoaH6z3/+c0P76N+/v1JSUhQZGSkHBwd1795dTz75pNLS0vLsX7x4ccXGxuo///mPxo8fr9DQUI0ePVr/+te/bmi/AAAAAADcqyzG1e7ciPtKenq6fHx8tDO6Ck/xAAAAAADcdjm/Q9PS0q46YUCSHO5QTQAAAAAAAPkioAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKZzMrsA3HlBb2+Qt7e32WUAAAAAAGDDDAoAAAAAAGA6AgoAAAAAAGA6AgoAAAAAAGA6AgoAAAAAAGA6AgoAAAAAAGA6AgoAAAAAAGA6AgoAAAAAAGA6AgoAAAAAAGA6AgoAAAAAAGA6AgoAAAAAAGA6AgoAAAAAAGA6J7MLwJ3X6J2v5Wh1M7sMAAAAAMBNSPywm9kl3BbMoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKa7qwOK5ORkWSwWJSUlFfjYCQkJslgsOnnyZIGOGx4ern79+hXomAAAAAAA3O9MDSgiIyNlsVhsLz8/P7Vo0UK//PKLJCkoKEgpKSmqXr16ge/7kUceUUpKinx8fAp8bAAAAAAAcGNMn0HRokULpaSkKCUlRcuXL5eTk5Nat24tSXJ0dFRAQICcnJzy3NYwDGVmZt7Ufl1cXBQQECCLxXLTtQMAAAAAgIJhekBhtVoVEBCggIAA1a5dW2+99ZYOHjyoo0eP5rrEI+eyjCVLlqhu3bqyWq1avXq1wsPD1adPH/Xr109FihSRv7+/PvvsM2VkZOiFF16Ql5eXQkJC9NNPP9n2e+UlHrGxsfL19dWSJUtUpUoVeXp62sKTHJmZmerbt698fX3l5+ent956S88//7zatWtnd0zZ2dmKiopS0aJFFRAQoJiYGLv1Y8eOVY0aNeTh4aGgoCD17NlTp0+ftq3PqWXhwoWqVKmS3N3d9fTTTysjI0MzZsxQcHCwihQpoj59+igrK6tAPw8AAAAAAMxgekBxudOnT2vWrFmqUKGC/Pz88u0XFRWl4cOHa/fu3apZs6YkacaMGSpWrJg2bdqkPn366NVXX9UzzzyjRx55RFu3blXz5s3VtWtXnTlzJt9xz5w5o9GjR2vmzJlatWqVDhw4oAEDBtjWjxw5UrNmzdL06dO1du1apaenKy4uLtc4M2bMkIeHhzZu3KhRo0Zp6NChWrZsmW29g4ODxo8fr507d2rGjBlasWKFoqKictUyfvx4zZ49W4sXL1ZCQoKeeuopLVq0SIsWLdLMmTP12Wef6bvvvsv3eM6fP6/09HS7FwAAAAAAdyXDRM8//7zh6OhoeHh4GB4eHoYkIzAw0EhMTDQMwzD27dtnSDK2bdtmGIZhxMfHG5KMuLg4u3HCwsKMRx991LacmZlpeHh4GF27drW1paSkGJKM9evX24114sQJwzAMY/r06YYk448//rBtM3HiRMPf39+27O/vb3z44Yd2+ylTpozRtm3bfGsxDMOoV6+e8dZbb+X7PsyZM8fw8/OzLedVS48ePQx3d3fj1KlTtrbmzZsbPXr0yHfcd99915CU67Uzukq+2wAAAAAAUFDS0tIMSUZaWto1+5o+gyIiIkJJSUlKSkrSxo0b1axZMz3xxBPav39/vtvUrVs3V1vOTArp0r0r/Pz8VKNGDVubv7+/JOnIkSP5juvu7q6QkBDbcmBgoK1/Wlqa/v77b9WvX99uP3Xq1LlqLVeOI0nx8fFq2rSpSpUqJS8vL3Xr1k3Hjh1TRkZGvrX4+/srODhYnp6edm1XO57o6GilpaXZXgcPHsy3LwAAAAAAZjI9oPDw8FCFChVUoUIF1a9fX1OnTlVGRoY+//zzq25zJWdnZ7tli8Vi15ZzM8zs7Ox8x81rDMMwcrVd7sr1+Y2Ts9/9+/erZcuWql69uubOnavExERNnDhRknTx4sXrPp4rx82L1WqVt7e33QsAAAAAgLuR6QHFlSwWixwcHHT27FmzS7Hj4+Mjf39/bdq0ydaWlZWlbdu23dA4W7ZsUWZmpsaMGaOHH35YFStW1OHDhwu6XAAAAAAA7il5P7/zDjp//rxSU1MlSSdOnNAnn3yi06dPq02bNiZXllufPn00fPhwVahQQZUrV9aECRN04sSJG3pUaUhIiDIzMzVhwgS1adNGa9eu1ZQpU25j1QAAAAAA3P1Mn0GxePFiBQYGKjAwUA899JA2b96sb7/9VuHh4WaXlstbb72lTp06qVu3bmrQoIE8PT3VvHlzubq6XvcYtWvX1tixYzVy5EhVr15ds2bN0vDhw29j1QAAAAAA3P0sRl43UcB1yc7OVpUqVdShQwcNGzbM7HKuKT09XT4+PtoZXUXVPthldjkAAAAAgPtczu/QtLS0a94X0fRLPO4l+/fv19KlSxUWFqbz58/rk08+0b59+9S5c2ezSwMAAAAA4J5m+iUe9xIHBwfFxsaqXr16atiwoXbs2KGff/5ZVapUMbs0AAAAAADuacyguAFBQUFau3at2WUAAAAAAHDfYQYFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQEFAAAAAAAwHQFFIRT09gazSwAAAAAAwA4BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMJ2T2QXgzmv0ztdytLqZXQYAAAAASYkfdjO7BOCuwAwKAAAAAABgOgIKAAAAAABgOgIKAAAAAABgOgIKAAAAAABgOgIKAAAAAABgOgIKAAAAAABgOgIKAAAAAABgOgIKAAAAAABgOgIKAAAAAABgOgIKAAAAAABgOgIKAAAAAABgOgIKAAAAAABgOgIKAAAAAABgOgIKAAAAAABgOgIKAAAAAABgOgIKAAAAAABgOgIKAAAAAABgOgIKAAAAAABgOgIKAAAAAABgOgKKKyQnJ8tisSgpKcnsUgAAAAAAKDQKVUBhsViu+oqMjDS7RAAAAAAACiUnswu4k1JSUmx/f/PNNxo8eLB+//13W5ubm5tOnDhhRmkAAAAAABRqhWoGRUBAgO3l4+Mji8WSqy3Hn3/+qYiICLm7u6tWrVpav3693Vhz585VtWrVZLVaFRwcrDFjxtitDw4O1nvvvadu3brJ09NTZcuW1ffff6+jR4+qbdu28vT0VI0aNbRlyxbbNseOHVOnTp1UunRpubu7q0aNGvr666/txv3uu+9Uo0YNubm5yc/PT48//rgyMjJuw7sFAAAAAMCdU6gCihsxcOBADRgwQElJSapYsaI6deqkzMxMSVJiYqI6dOigZ599Vjt27FBMTIwGDRqk2NhYuzE++ugjNWzYUNu2bVOrVq3UtWtXdevWTc8995y2bt2qChUqqFu3bjIMQ5J07tw51alTRwsXLtTOnTv18ssvq2vXrtq4caOkSzNAOnXqpO7du2v37t1KSEjQU089Zdv+SufPn1d6errdCwAAAACAu5HFyO/X7X0uNjZW/fr108mTJ+3ak5OTVa5cOX3xxRd68cUXJUm7du1StWrVtHv3blWuXFldunTR0aNHtXTpUtt2UVFR+vHHH/Xrr79KujSD4rHHHtPMmTMlSampqQoMDNSgQYM0dOhQSdKGDRvUoEEDpaSkKCAgIM86W7VqpSpVqmj06NHaunWr6tSpo+TkZJUtW/aaxxgTE6MhQ4bkak9LS5O3t/e13yQAAAAAAG5Benq6fHx8rut3KDMo8lGzZk3b34GBgZKkI0eOSJJ2796thg0b2vVv2LCh9uzZo6ysrDzH8Pf3lyTVqFEjV1vOuFlZWXr//fdVs2ZN+fn5ydPTU0uXLtWBAwckSbVq1VKTJk1Uo0YNPfPMM/r888+ves+M6OhopaWl2V4HDx688TcCAAAAAIA7gIAiH87Ozra/LRaLJCk7O1uSZBiGrS1HXhNR8hrjauOOGTNGH330kaKiorRixQolJSWpefPmunDhgiTJ0dFRy5Yt008//aSqVatqwoQJqlSpkvbt25fnMVitVnl7e9u9AAAAAAC4GxFQ3ISqVatqzZo1dm3r1q1TxYoV5ejoeNPjrl69Wm3bttVzzz2nWrVqqXz58tqzZ49dH4vFooYNG2rIkCHatm2bXFxcNH/+/JveJwAAAAAAd4NC9ZjRgtK/f3/Vq1dPw4YNU8eOHbV+/Xp98sknmjRp0i2NW6FCBc2dO1fr1q1TkSJFNHbsWKWmpqpKlSqSpI0bN2r58uVq1qyZSpQooY0bN+ro0aO29QAAAAAA3KsIKG5CaGio5syZo8GDB2vYsGEKDAzU0KFDFRkZeUvjDho0SPv27VPz5s3l7u6ul19+We3atVNaWpokydvbW6tWrdK4ceOUnp6usmXLasyYMXriiScK4KgAAAAAADBPoX2KR2F0I3dPBQAAAADgVvEUDwAAAAAAcE8hoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKYjoAAAAAAAAKZzMrsA3HmN3vlajlY3s8sAAADAfSLxw25mlwDgPsAMCgAAAAAAYDoCCgAAAAAAYDoCCgAAAAAAYDoCCgAAAAAAYDoCCgAAAAAAYDoCCgAAAAAAYDoCCgAAAAAAYDoCCgAAAAAAYDoCCgAAAAAAYDoCCgAAAAAAYDoCCgAAAAAAYDoCCgAAAAAAYDoCCgAAAAAAYDoCCgAAAAAAYDoCCgAAAAAAYDoCCgAAAAAAYDoCCgAAAAAAYDoCCgAAAAAAYDoCCgAAAAAAYLpCE1BERkaqXbt2udoTEhJksVh08uTJO1KHxWJRXFzcHdkXAAAAAAD3ikITUAAAAAAAgLsXAcUV5s6dq2rVqslqtSo4OFhjxoyxW5/XDAhfX1/FxsZKki5cuKDevXsrMDBQrq6uCg4O1vDhwyVJwcHBkqQnn3xSFovFtixJkydPVkhIiFxcXFSpUiXNnDkz136/+OILPfnkk3J3d9cDDzygBQsWFOixAwAAAABgFgKKyyQmJqpDhw569tlntWPHDsXExGjQoEG28OF6jB8/XgsWLNCcOXP0+++/68svv7QFEZs3b5YkTZ8+XSkpKbbl+fPn67XXXlP//v21c+dO9ejRQy+88ILi4+Ptxh4yZIg6dOigX375RS1btlSXLl10/PjxfGs5f/680tPT7V4AAAAAANyNnMwu4E5auHChPD097dqysrJsf48dO1ZNmjTRoEGDJEkVK1bUrl279OGHHyoyMvK69nHgwAE98MADevTRR2WxWFS2bFnbuuLFi0u6NOMiICDA1j569GhFRkaqZ8+ekqQ33nhDGzZs0OjRoxUREWHrFxkZqU6dOkmSPvjgA02YMEGbNm1SixYt8qxl+PDhGjJkSK72WZ4fy8vVUZJUZvCO6zouAAAAAABup0I1gyIiIkJJSUl2ry+++MK2fvfu3WrYsKHdNg0bNtSePXvsgoyriYyMVFJSkipVqqS+fftq6dKl19wmv/3u3r3brq1mzZq2vz08POTl5aUjR47kO250dLTS0tJsr4MHD17XMQAAAAAAcKcVqhkUHh4eqlChgl3bX3/9ZfvbMAxZLBa79YZh2C1bLJZcbRcvXrT9HRoaqn379umnn37Szz//rA4dOujxxx/Xd999d9Xa8trvlW3Ozs65tsnOzs53TKvVKqvVetX9AgAAAABwNyhUMyiupWrVqlqzZo1d27p161SxYkU5Ol66JKJ48eJKSUmxrd+zZ4/OnDljt423t7c6duyozz//XN98843mzp1ru1eEs7NzrtkYVapUyXO/VapUKbBjAwAAAADgblaoZlBcS//+/VWvXj0NGzZMHTt21Pr16/XJJ59o0qRJtj6NGzfWJ598oocffljZ2dl666237GY2fPTRRwoMDFTt2rXl4OCgb7/9VgEBAfL19ZV06Ukey5cvV8OGDWW1WlWkSBG9+eab6tChg0JDQ9WkSRP98MMPmjdvnn7++ec7/RYAAAAAAGAKZlBcJjQ0VHPmzNHs2bNVvXp1DR48WEOHDrW7QeaYMWMUFBSkRo0aqXPnzhowYIDc3d1t6z09PTVy5EjVrVtX9erVU3JyshYtWiQHBwfb9suWLVNQUJAefPBBSVK7du308ccf68MPP1S1atX06aefavr06QoPD7+Thw8AAAAAgGksxpU3VMB9Kz09XT4+PtoZXYWneAAAAAAAbruc36FpaWny9va+al9mUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANM5mV0A7rygtzfI29vb7DIAAAAAALBhBgUAAAAAADAdAQUAAAAAADAdAQUAAAAAADAdAQUAAAAAADAdAQUAAAAAADAdAQUAAAAAADAdAQUAAAAAADAdAQUAAAAAADAdAQUAAAAAADAdAQUAAAAAADAdAQUAAAAAADCdk9kF4M5r9M7XcrS6mV0GAAAAcN9I/LCb2SUA9zxmUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANMRUAAAAAAAANPd9wGFxWJRXFzcHd1ncHCwxo0bd9v3ExkZqXbt2t32/QAAAAAAcLvd8wFFamqq+vTpo/Lly8tqtSooKEht2rTR8uXLzS4NAAAAAABcJyezC7gVycnJatiwoXx9fTVq1CjVrFlTFy9e1JIlS9SrVy/99ttvZpcIAAAAAACuwz09g6Jnz56yWCzatGmTnn76aVWsWFHVqlXTG2+8oQ0bNuS5zaFDh9SxY0cVKVJEfn5+atu2rZKTkyVJS5Yskaurq06ePGm3Td++fRUWFmZbXrdunRo1aiQ3NzcFBQWpb9++ysjIyLfOsWPHqkaNGvLw8FBQUJB69uyp06dP29bHxsbK19dXS5YsUZUqVeTp6akWLVooJSXF1icrK0tvvPGGfH195efnp6ioKBmGcRPvGgAAAAAAd597NqA4fvy4Fi9erF69esnDwyPXel9f31xtZ86cUUREhDw9PbVq1SqtWbPGFgZcuHBBjz/+uHx9fTV37lzbNllZWZozZ466dOkiSdqxY4eaN2+up556Sr/88ou++eYbrVmzRr179863VgcHB40fP147d+7UjBkztGLFCkVFReWqbfTo0Zo5c6ZWrVqlAwcOaMCAAbb1Y8aM0bRp0zR16lStWbNGx48f1/z586/6Hp0/f17p6el2LwAAAAAA7kb37CUef/zxhwzDUOXKla97m9mzZ8vBwUFffPGFLBaLJGn69Ony9fVVQkKCmjVrpo4dO+qrr77Siy++KElavny5Tpw4oWeeeUaS9OGHH6pz587q16+fJOmBBx7Q+PHjFRYWpsmTJ8vV1TXXfnP6SlK5cuU0bNgwvfrqq5o0aZKt/eLFi5oyZYpCQkIkSb1799bQoUNt68eNG6fo6Gi1b99ekjRlyhQtWbLkqsc7fPhwDRkyJFf7LM+P5eXqKEkqM3jHVccAAAAAAOBOuGdnUORc3pATNFyPxMRE/fHHH/Ly8pKnp6c8PT1VtGhRnTt3Tnv37pUkdenSRQkJCTp8+LAkadasWWrZsqWKFCliGyM2Nta2vaenp5o3b67s7Gzt27cvz/3Gx8eradOmKlWqlLy8vNStWzcdO3bM7rIQd3d3WzghSYGBgTpy5IgkKS0tTSkpKWrQoIFtvZOTk+rWrXvV442OjlZaWprtdfDgwet+rwAAAAAAuJPu2RkUDzzwgCwWi3bv3n3dj9rMzs5WnTp1NGvWrFzrihcvLkmqX7++QkJCNHv2bL366quaP3++pk+fbjdGjx491Ldv31xjlClTJlfb/v371bJlS73yyisaNmyYihYtqjVr1ujFF1/UxYsXbf2cnZ3ttrNYLLd8jwmr1Sqr1XpLYwAAAAAAcCfcswFF0aJF1bx5c02cOFF9+/bNdR+KkydP5roPRWhoqL755huVKFFC3t7e+Y7duXNnzZo1S6VLl5aDg4NatWplN8avv/6qChUqXFedW7ZsUWZmpsaMGSMHh0sTVubMmXOdR3mJj4+PAgMDtWHDBjVq1EiSlJmZqcTERIWGht7QWAAAAAAA3I3u2Us8JGnSpEnKyspS/fr1NXfuXO3Zs0e7d+/W+PHj7S6HyNGlSxcVK1ZMbdu21erVq7Vv3z6tXLlSr732mv766y+7flu3btX777+vp59+2u6+Em+99ZbWr1+vXr16KSkpSXv27NGCBQvUp0+fPGsMCQlRZmamJkyYoD///FMzZ87UlClTbvhYX3vtNY0YMULz58/Xb7/9pp49e+Z62ggAAAAAAPeqezqgKFeunLZu3aqIiAj1799f1atXV9OmTbV8+XJNnjw5V393d3etWrVKZcqU0VNPPaUqVaqoe/fuOnv2rN2MigceeED16tXTL7/8Ynt6R46aNWtq5cqV2rNnjx577DE9+OCDGjRokAIDA/OssXbt2ho7dqxGjhyp6tWra9asWRo+fPgNH2v//v3VrVs3RUZGqkGDBvLy8tKTTz55w+MAAAAAAHA3shi3eqMD3DPS09Pl4+OjndFVeIoHAAAAAOC2y/kdmpaWdtVbLUj3+AwKAAAAAABwfyCgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApiOgAAAAAAAApnMyuwDceUFvb5C3t7fZZQAAAAAAYMMMCgAAAAAAYDoCCgAAAAAAYDoCCgAAAAAAYDoCCgAAAAAAYDpuklmIGIYhSUpPTze5EgAAAABAYZDz+zPn9+jVEFAUIseOHZMkBQUFmVwJAAAAAKAwOXXqlHx8fK7ah4CiEClatKgk6cCBA9f8YgCFRXp6uoKCgnTw4EEevwuIcwK4EucEkBvnBW6EYRg6deqUSpYsec2+BBSFiIPDpVuO+Pj48B8S4Are3t6cF8BlOCcAe5wTQG6cF7he1/sP5NwkEwAAAAAAmI6AAgAAAAAAmI6AohCxWq169913ZbVazS4FuGtwXgD2OCcAe5wTQG6cF7hdLMb1POsDAAAAAADgNmIGBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BBQAAAAAAMB0BRSEyadIklStXTq6urqpTp45Wr15tdknALVu1apXatGmjkiVLymKxKC4uzm69YRiKiYlRyZIl5ebmpvDwcP366692fc6fP68+ffqoWLFi8vDw0L/+9S/99ddfdn1OnDihrl27ysfHRz4+PuratatOnjx5m48OuHHDhw9XvXr15OXlpRIlSqhdu3b6/fff7fpwXqCwmTx5smrWrClvb295e3urQYMG+umnn2zrOSdQmA0fPlwWi0X9+vWztXFOwCwEFIXEN998o379+mngwIHatm2bHnvsMT3xxBM6cOCA2aUBtyQjI0O1atXSJ598kuf6UaNGaezYsfrkk0+0efNmBQQEqGnTpjp16pStT79+/TR//nzNnj1ba9as0enTp9W6dWtlZWXZ+nTu3FlJSUlavHixFi9erKSkJHXt2vW2Hx9wo1auXKlevXppw4YNWrZsmTIzM9WsWTNlZGTY+nBeoLApXbq0RowYoS1btmjLli1q3Lix2rZta/vBxTmBwmrz5s367LPPVLNmTbt2zgmYxkChUL9+feOVV16xa6tcubLx9ttvm1QRUPAkGfPnz7ctZ2dnGwEBAcaIESNsbefOnTN8fHyMKVOmGIZhGCdPnjScnZ2N2bNn2/ocOnTIcHBwMBYvXmwYhmHs2rXLkGRs2LDB1mf9+vWGJOO33367zUcF3JojR44YkoyVK1cahsF5AeQoUqSI8cUXX3BOoNA6deqU8cADDxjLli0zwsLCjNdee80wDP53AuZiBkUhcOHCBSUmJqpZs2Z27c2aNdO6detMqgq4/fbt26fU1FS7777ValVYWJjtu5+YmKiLFy/a9SlZsqSqV69u67N+/Xr5+PjooYcesvV5+OGH5ePjwzmEu15aWpokqWjRopI4L4CsrCzNnj1bGRkZatCgAecECq1evXqpVatWevzxx+3aOSdgJiezC8Dt988//ygrK0v+/v527f7+/kpNTTWpKuD2y/l+5/Xd379/v62Pi4uLihQpkqtPzvapqakqUaJErvFLlCjBOYS7mmEYeuONN/Too4+qevXqkjgvUHjt2LFDDRo00Llz5+Tp6an58+eratWqth9KnBMoTGbPnq2tW7dq8+bNudbxvxMwEwFF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",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Countplot showing fraud transaction by top cities \n",
    "top_cities = df['city'].value_counts().nlargest(10).index\n",
    "city_df = df[df['city'].isin(top_cities)]\n",
    "plt.figure(figsize=(12,8))\n",
    "sns.countplot(data=city_df, y='city', hue='is_fraud')\n",
    "plt.title('Top Cities and Fraudulent Transactions')\n",
    "plt.xlabel('Transaction Count')\n",
    "plt.ylabel('City')\n",
    "plt.legend(['Legitimate', 'Fraudulent'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "b9d79166-0509-467d-8c2e-0eb95114641f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Countplot showing state fraud distribution\n",
    "plt.figure(figsize=(12,8))\n",
    "sns.countplot(data=df, x='state', order=df['state'].value_counts().index, hue='is_fraud')\n",
    "plt.title('State-wise Fraud Distribution')\n",
    "plt.xlabel('State')\n",
    "plt.ylabel('Count')\n",
    "plt.xticks(rotation=90)\n",
    "plt.legend(['Legitimate', 'Fraudulent'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "4a32cd47-cf51-4293-ac14-bcd79ad4665e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA2QAAAHUCAYAAABVveuUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABYM0lEQVR4nO3deVyVdf7//+eRHYQji2wpYrnk1pTaIDq5i5pojs5oaaTluIypkZpmTopWOJmajWaZqZjLUL8xzbQhd83daChNc6zR0AJxQXAFhOv3R1/PxyOIgnguhcf9dju3m+d9vc71fl/XORFP3tf1PhbDMAwBAAAAAByuktkDAAAAAICKikAGAAAAACYhkAEAAACASQhkAAAAAGASAhkAAAAAmIRABgAAAAAmIZABAAAAgEkIZAAAAABgEgIZAAAAAJiEQAagQrBYLLf02Lx5s9lDvWPi4+O1cuXKQu2bN2827dj79++vypUr33B75cqV1b9/f8cN6B5ksVgUFxdXbM3Ro0dv+Jlv2rSpYwZ6CxISEmSxWHT06NFbfs3IkSNlsVgUHR195wZ2ndKMsyRu5T0FUH44mz0AAHCEnTt32j1/7bXXtGnTJm3cuNGuvX79+o4clkPFx8frT3/6k7p3727X3rhxY+3cubNcHzt+M3z4cPXp08eurbhAfLfLy8vTkiVLJElJSUn65ZdfdN9995k8qtu3c+dOVatWzexhAHAQAhmACqFZs2Z2z6tWrapKlSoVar/exYsX5enpeSeHZjofH5+bnoeKpry+72FhYbf8XhuGocuXL8vDw+MOj6r0PvvsM508eVJdunTRmjVrtGjRIr3yyitmD+u28d8jULFwySIA/D+tW7dWw4YNtXXrVjVv3lyenp567rnnJEkff/yxoqKiFBISIg8PD9WrV08vv/yyLly4YLePq5fg/fjjj3r88cdVuXJlVa9eXaNGjVJOTo5d7Xvvvaff/e53qly5sry9vfXggw/a/TJ58uRJDR06VPXr11flypUVGBiotm3b6quvvio09pycHE2ePFn16tWTu7u7/P391aZNG+3YsUPSb5dAXbhwQYsWLbJdqta6dWtJN75kcdWqVYqMjJSnp6e8vb3VoUOHQjONcXFxslgs+v777/XUU0/JarUqKChIzz33nLKyskr1PtxMamqqnn76aQUGBsrNzU316tXT9OnT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U1BQkK3NyclJvXv3vqXXG4Zhu0yxQ4cOkqSaNWuqdevWWr58ubKzswu9pqhzLMnuv8uSvm/XeuGFF5SRkaH/7//7/yT9Nhv53nvvqUuXLgoPD5ckPfzww3J1ddWgQYO0aNEi/e9//7ul4/3973+vf//733r55Ze1efNmXbp06ZZeB+DeQCADgGuEhIQUajt//rwee+wx7d69W6+//ro2b96svXv36tNPP5WkQr8ceXp6yt3d3a7Nzc3Ndg+JJMXExGjBggX6+eef1bNnTwUGBioiIkLr1q2z1cyYMUN//etfFRERoeXLl2vXrl3au3evOnXqZNfnyZMnFRoaaheebsfVy6CKOhehoaEqKChQZmamXbu/v3+h45UKn5uiVKpUSU2bNi3ycf0xnT59+objunbsJeXp6VnoEk6r1aotW7bo4Ycf1iuvvKIGDRooNDRUEydOLPZep4KCAkVFRenTTz/VmDFjtGHDBu3Zs0e7du2SVPQ5udn5O336tJydnQvVBQcHl+g4q1WrVugce3t727YXdW737NmjqKgoSdK8efO0fft27d27V+PHj7/h8dzM6dOnixz7rR7Pxo0bdeTIEf35z39Wdna2zp49q7Nnz6pXr166ePFikfdW3ewcl+Z9u9Yjjzyixx57TO+++64kafXq1Tp69KiGDRtmq3nggQe0fv16BQYG6vnnn9cDDzygBx54QO+8806x+/7HP/6hsWPHauXKlWrTpo38/PzUvXt3HT58+CZnCsC9gHvIAOAaV++ludbGjRv166+/avPmzXb3ppw9e/a2+nr22Wf17LPP6sKFC9q6dasmTpyo6Oho/fe//1WNGjW0ZMkStW7dWu+9957d666/f6lq1aratm2bCgoKyiSUXf3FNS0trdC2X3/9VZUqVSpyFsUR/P39bzguSQoICJAkWyC+fiGVG81EFvW+S1KjRo2UmJgowzD03XffKSEhQZMnT5aHh4defvnlIl+zf/9+ffvtt0pISFC/fv1s7T/++ONNju7G/P39deXKFZ0+fdouWKSnp5d6n0Up6jwkJibKxcVFq1evtvtDQ1Hfaefm5lbonEuFg7K/v3+RY7/V45k/f76k3/5oMWPGjCK3Dx48+Jb2dVVZvG8jRozQn//8Z33zzTeaPXu26tSpY5vBu+qxxx7TY489pvz8fH399deaNWuWYmNjFRQUpCeffLLI/Xp5eWnSpEmaNGmSTpw4YZst69q1q3744YcSHSeAuw8zZABwE1d/Sb36F/Wr5s6dWyb79/LyUufOnTV+/Hjl5ubq+++/t/V7fZ/fffddoZUOO3furMuXL9utHFgUNze3W5rNqFu3ru677z4tW7bMbsW6CxcuaPny5baVF83Qrl07HThwQN98841d+0cffSSLxaI2bdpIku0Sse+++86ubtWqVaXq12Kx6He/+53efvttValSpVD/19dKZft5uXpcS5cutWsvySIYpWWxWOTs7Gxb+EL6bbZo8eLFhWrDw8MLnfONGzfq/Pnzdm1t2rTRhg0bdOLECVtbfn6+Pv7445uOJzMzUytWrFCLFi20adOmQo++fftq79692r9/f4mPU7q99+2Pf/yjwsLCNGrUKK1fv15Dhw69Ydh3cnJSRESEbUatuM/UtYKCgtS/f3899dRTOnToUKHLhwHce5ghA4CbaN68uXx9fTVkyBBNnDhRLi4uWrp0qb799ttS73PgwIHy8PBQixYtFBISovT0dE2ZMkVWq1WPPvqoJCk6OlqvvfaaJk6cqFatWunQoUOaPHmyatasabdS3lNPPaWFCxdqyJAhOnTokNq0aaOCggLt3r1b9erVs/3VvVGjRtq8ebM+//xzhYSEyNvbW3Xr1i00tkqVKmnq1Knq27evoqOjNXjwYOXk5Oitt97S2bNn9fe//73Ux327XnzxRX300Ufq0qWLJk+erBo1amjNmjWaM2eO/vrXv6pOnTqSfrv0rX379poyZYp8fX1Vo0YNbdiwwXaZ6a1YvXq15syZo+7du+v++++XYRj69NNPdfbs2UKzHtd68MEH9cADD+jll1+WYRjy8/PT559/bnc5aklFRUWpZcuWGjNmjC5cuKCmTZtq+/btRYaistalSxfNmDFDffr00aBBg3T69GlNmzatUHCRfrsU99VXX9WECRPUqlUrHThwQLNnz5bVarWr+9vf/qZVq1apbdu2mjBhgjw9PfXuu+8W+hqJoixdulSXL1/WiBEjbCuNXsvf319Lly7V/Pnz9fbbb9/ycZbF++bk5KTnn39eY8eOlZeXV6Gl/t9//31t3LhRXbp0UVhYmC5fvmxbSbN9+/Y33G9ERISio6P10EMPydfXVwcPHtTixYtN/eMIgLLDDBkA3IS/v7/WrFkjT09PPf3003ruuedUuXLlW/pr/o089thj2r9/v1544QV16NBBL774ourUqaOvvvpKVatWlSSNHz9eo0aN0vz589WlSxd9+OGHev/99wstOe/s7KwvvvhC48aN04oVK/TEE0/omWee0bZt22wLEkjSO++8o9q1a+vJJ5/Uo48+WuwlXX369NHKlSt1+vRp9e7dW88++6x8fHy0adOmQv07UtWqVbVjxw61bdtW48aNU3R0tL788ktNnTpVs2bNsqtdvHix2rVrp7Fjx+rPf/6zfvnllxJ9b1Pt2rVVpUoVTZ06Vd26dbNdipaQkKCBAwfe8HUuLi76/PPPVadOHQ0ePFhPPfWUMjIytH79+lIfd6VKlbRq1Sr17dtXU6dOtS2B/8UXX5R6n7eqbdu2WrBggfbt26euXbtq/Pjx+tOf/lTkJZsvvfSSXnrpJSUkJKhr165avny5PvnkE1WpUsWurmHDhlq/fr18fHzUr18/DRo0SA899JDtKxmKM3/+fAUGBqp79+5Fbm/UqJGaNWumJUuWKDc395aPs6zet6sLk8TExBQKog8//LCuXLmiiRMnqnPnzoqJidHJkye1atUq2316RWnbtq1WrVqlZ599VlFRUZo6daqeeeYZff755yUaG4C7k8UwrvsGRQAAAJTKrFmzNGLECO3fv18NGjQwezgA7gEEMgAAgNv0n//8R0eOHNHgwYPVokWLIhc9AYCiEMgAAABuU3h4uNLT0/XYY49p8eLFJf5KAgAVF4EMAAAAAEzCoh4AAAAAYBICGQAAAACYhEAGAAAAACbhi6HLUEFBgX799Vd5e3vLYrGYPRwAAAAAJjEMQ+fOnVNoaKgqVbrxPBiBrAz9+uuvql69utnDAAAAAHCXOHbsmKpVq3bD7QSyMuTt7S3pt5Pu4+Nj8mgAAAAAmCU7O1vVq1e3ZYQbIZCVoauXKfr4+BDIAAAAANz0ViYW9QAAAAAAkxDIAAAAAMAkBDIAAAAAMAn3kDlYfn6+8vLyzB4G7iAnJyc5Ozvz1QcAAAC4KQKZA50/f17Hjx+XYRhmDwV3mKenp0JCQuTq6mr2UAAAAHAXI5A5SH5+vo4fPy5PT09VrVqV2ZNyyjAM5ebm6uTJkzpy5Ihq165d7BcBAgAAoGIjkDlIXl6eDMNQ1apV5eHhYfZwcAd5eHjIxcVFP//8s3Jzc+Xu7m72kAAAAHCX4k/3DsbMWMXArBgAAABuBb81AgAAAIBJCGQAAAAAYBLuITNZamqqTp065bD+AgICFBYW5rD+biY8PFyxsbGKjY29YU1cXJxWrlyplJQUh40LAAAAcAQCmYlSU1NV78G6unjpssP69PRw18EfDt1yKOvfv7/Onj2rlStX3pHx7N27V15eXrbnFotFK1asUPfu3W1to0eP1vDhw+9I/9ci+AEAAMDRCGQmOnXqlC5euqwlgx5WvZDKd7y/g2nn9fQHKTp16tRdM0tWtWrVm9ZUrlxZlSvf+fMDAAAAOBr3kN0F6oVUVuNw6x1/lHXoO3DggB5//HFVrlxZQUFBiomJsbv88ty5c+rbt6+8vLwUEhKit99+W61bt7a7PDE8PFwzZ860/VuS/vjHP8pisdiex8XF6eGHH7a9pn///urevbvi4+MVFBSkKlWqaNKkSbpy5Ypeeukl+fn5qVq1alqwYIHdeMeOHas6derI09NT999/v1599VXl5eVJkhISEjRp0iR9++23slgsslgsSkhIkCRlZWVp0KBBCgwMlI+Pj9q2batvv/22TM8lAAAAKiZmyFAqaWlpatWqlQYOHKgZM2bo0qVLGjt2rHr16qWNGzdKkkaOHKnt27dr1apVCgoK0oQJE/TNN9/Yhatr7d27V4GBgVq4cKE6deokJyenG/a/ceNGVatWTVu3btX27ds1YMAA7dy5Uy1bttTu3bv18ccfa8iQIerQoYOqV68uSfL29lZCQoJCQ0O1b98+DRw4UN7e3hozZox69+6t/fv3KykpSevXr5ckWa1WGYahLl26yM/PT1988YWsVqvmzp2rdu3a6b///a/8/PzK9sQCAADcAY5et0CScnJy5Obm5tA+77b1Em4FgQyl8t5776lx48aKj4+3tS1YsEDVq1fXf//7X4WEhGjRokVatmyZ2rVrJ0lauHChQkNDb7jPq5cvVqlSRcHBwcX27+fnp3/84x+qVKmS6tatq6lTp+rixYt65ZVXJEnjxo3T3//+d23fvl1PPvmkJOlvf/ub7fXh4eEaNWqUPv74Y40ZM0YeHh6qXLmynJ2d7freuHGj9u3bp4yMDNsPlGnTpmnlypX617/+pUGDBpXktAEAADhcamqqHnywni5duujYji0WyTAc2qWHh6d++OHgPRXKCGQoleTkZG3atKnIe7t++uknXbp0SXl5efr9739v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Xr261q9fr44dO+rgwYNKSkrSrl27FBERIUmaN2+eIiMjdejQIdWtW1dr167VgQMHdOzYMYWGhkr6baW//v3764033rALC2UpICBAHh6e2r1g0h3Zf1E8PDzvWIh4+OGHNWPGDL355psaN26cWrZsqSlTpuiZZ56x1dSrV09z5sxRfHy8XnvtNfXs2VOjR4/WBx98YKsZNWqU0tLS1L9/f1WqVEnPPfec/vjHPyorK8tWM27cOP3vf/9TdHS0rFarXnvttWJnyDw9PbV161aNHTtWPXr00Llz53TfffepXbt2JXp/J0+erMGDB+uBBx5QTk7Obd3XBgAAAJgeyA4fPqzQ0FC5ubkpIiJC8fHxuv/++3XkyBGlp6fbVr+Tfvs+rFatWmnHjh0aPHiwkpOTlZeXZ1cTGhqqhg0baseOHerYsaN27twpq9VqC2OS1KxZM1mtVu3YsUN169bVzp071bBhQ1sYk6SOHTsqJydHycnJatOmTZFjz8nJUU5Oju15dnZ2iY49LCxMP/xwUKdOnSrR625HQECAwsLCbrn+6pLv19u8eXOR7S+++KJefPFFu7aYmBi750OGDNGQIUPs2l555RXbv52dnTVz5sxC3zN2LR8fH3388cd2bf369bN7fn1YCg4O1qJFi264z6KO9foxNGvWTN9+++0N9wEAAACUhKmBLCIiQh999JHq1KmjEydO6PXXX1fz5s31/fffKz09XZIUFBRk95qgoCD9/PPPkqT09HS5urrK19e3UM3V16enpyswMLBQ34GBgXY11/fj6+srV1dXW01RpkyZokmTbm92KywsrEQBCQAAAED5YeqiHp07d1bPnj3VqFEjtW/fXmvWrJEku1mMq98ZdZVhGIXarnd9TVH1pam53rhx45SVlWV7HDt2rNhxAQAAAMC1TA1k1/Py8lKjRo10+PBh231l189QZWRk2GazgoODlZubq8zMzGJrTpw4UaivkydP2tVc309mZqby8vIKzZxdy83NTT4+PnYPAAAAALhVd1Ugy8nJ0cGDBxUSEqKaNWsqODhY69ats23Pzc3Vli1b1Lx5c0lSkyZN5OLiYleTlpam/fv322oiIyOVlZWlPXv22Gp2796trKwsu5r9+/fbLaO+du1aubm5qUmTJnf0mAEAAABUXKbeQzZ69Gh17dpVYWFhysjI0Ouvv67s7Gz169dP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ZAAAAABgEu4hAwAAAACTEMgAAAAAwCQEMgAAAAAwCYEMAAAAAExCIAMAAAAAkxDIAAAAAMAkBDIAAAAAMAmBDAAAAABMQiADAKAUPvjgA1WvXl2VKlXSzJkzb/l1/fv3V/fu3e/YuAAA9xYCGQDANDcKJ5s3b5bFYtHZs2cdPqZbkZ2drWHDhmns2LH65ZdfNGjQoEI1R48elcViUUpKikPGFB4eLovFIovFIg8PD4WHh6tXr17auHGjQ/oHAJQOgQwAUGHl5eWV6nWpqanKy8tTly5dFBISIk9PzzIeWelMnjxZaWlpOnTokD766CNVqVJF7du31xtvvGH20AAAN0AgAwDcE5YvX64GDRrIzc1N4eHhmj59ut12i8WilStX2rVVqVJFCQkJkv5vxuqTTz5R69at5e7uriVLlhTZV2pqqp544glVrlxZPj4+6tWrl06cOCFJSkhIUKNGjSRJ999/vywWi44ePVpoHzVr1pQkPfLII7JYLGrdurXd9mnTpikkJET+/v56/vnn7cJhbm6uxowZo/vuu09eXl6KiIjQ5s2bb3qOvL29FRwcrLCwMLVs2VIffPCBXn31VU2YMEGHDh2SJOXn52vAgAGqWbOmPDw8VLduXb3zzju2fWzdulUuLi5KT0+32/eoUaPUsmXLm44BAFAyBDIAwF0vOTlZvXr10pNPPql9+/YpLi5Or776qi1slcTYsWM1YsQIHTx4UB07diy03TAMde/eXWfOnNGWLVu0bt06/fTTT+rdu7ckqXfv3lq/fr0kac+ePUpLS1P16tUL7WfPnj2SpPXr1ystLU2ffvqpbdumTZv0008/adOmTVq0aJESEhLsjuXZZ5/V9u3blZiYqO+++05//vOf1alTJx0+fLjEx/vCCy/IMAx99tlnkqSCggJVq1ZNn3zyiQ4cOKAJEybolVde0SeffCJJatmype6//34tXrzYto8rV65oyZIlevbZZ0vcPwCgeM5mDwAAULGtXr1alStXtmvLz8+3ez5jxgy1a9dOr776qiSpTp06OnDggN566y3179+/RP3FxsaqR48eN9y+fv16fffddzpy5IgtaC1evFgNGjTQ3r179eijj8rf31+SVLVqVQUHBxe5n6pVq0qS/P39C9X4+vpq9uzZcnJy0oMPPqguXbpow4YNGjhwoH766Sf985//1PHjxxUaGipJGj16tJKSkrRw4ULFx8eX6Hj9/PwUGBhom8VzcXHRpEmTbNtr1qypHTt26JNPPlGvXr0kSQMGDNDChQv10ksvSZLWrFmjixcv2rYDAMoOM2QAAFO1adNGKSkpdo8PP/zQrubgwYNq0aKFXVuLFi10+PDhQuHtZpo2bVrs9oMHD6p69ep2s17169dXlSpVdPDgwRL1dSMNGjSQk5OT7XlISIgyMjIkSd98840Mw1CdOnVUuXJl22PLli366aefStWfYRiyWCy25++//76aNm2qqlWrqnLlypo3b55SU1Nt2/v3768ff/xRu3btkiQtWLBAvXr1kpeXV6n6BwDcGDNkAABTeXl5qVatWnZtx48ft3t+faC42nYti8VSqK2oRTtuFiqK6qu49tJwcXGxe26xWFRQUCDpt0sKnZyclJycbBfaJBWaSbwVp0+f1smTJ233tH3yySd68cUXNX36dEVGRsrb21tvvfWWdu/ebXtNYGCgunbtqoULF+r+++/XF198cUv3sAEASo5ABgC469WvX1/btm2za9uxY4fq1KljCy1Vq1ZVWlqabfvhw4d18eLFUvWVmpqqY8eO2WbJDhw4oKysLNWrV++W9+Pq6iqp8OWXN/PII48oPz9fGRkZeuyxx0r02qK88847qlSpku3rBb766is1b95cQ4cOtdUUNfP2l7/8RU8++aSqVaumBx54oNAMJQCgbBDIAAB3vVGjRunRRx/Va6+9pt69e2vnzp2aPXu25syZY6tp27atZs+erWbNmqmgoEBjx44tNBN1K9q3b6+HHnpIffv21cyZM3XlyhUNHTpUrVq1uunljtcKDAyUh4eHkpKSVK1aNbm7u8tqtd70dXXq1FHfvn31zDPPaPr06XrkkUd06tQpbdy4UY0aNdLjjz9+w9eeO3dO6enpysvL05EjR7RkyRJ9+OGHmjJlim0WslatWvroo4/05ZdfqmbNmlq8eLH27t1rm0G7qmPHjrJarXr99dc1efLkWz5uAEDJcA8ZAOCu17hxY33yySdKTExUw4YNNWHCBE2ePNluQY/p06erevXqatmypfr06aPRo0eX6vvBri6f7+vrq5YtW6p9+/a6//779fHHH5doP87OzvrHP/6huXPnKjQ0VE888cQtv3bhwoV65plnNGrUKNWtW1fdunXT7t27i1zN8VoTJkxQSEiIatWqpZiYGGVlZWnDhg0aO3asrWbIkCHq0aOHevfurYiICJ0+fdputuyqSpUqqX///srPz9czzzxz6wcOACgRi3H9BfcAAACSBg4cqBMnTmjVqlVmDwUAyi0uWQQAAHaysrK0d+9eLV261Pb9ZQCAO4NABgAA7DzxxBPas2ePBg8erA4dOpg9HAAo17hkEQAAAABMwqIeAAAAAGASAhkAAAAAmIRABgAAAAAmIZABAAAAgEkIZAAAAABgEgIZAAAAAJiEQAYAAAAAJiGQAQAAAIBJ/n+t+YFLPhnUBgAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Histogram showing fraud analysis by transaction hours\n",
    "plt.figure(figsize=(10,5))\n",
    "sns.histplot(data=df, x='hour', bins=24, hue='is_fraud', multiple='stack')\n",
    "plt.title('Transaction Hours and Fraud Analysis')\n",
    "plt.xlabel('Hour of the Day')\n",
    "plt.ylabel('Count')\n",
    "plt.legend(['Legitimate', 'Fraudulent'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "6dda1ff2-9976-466b-b1b7-8c2122fde39b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Splitting the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "88ab0dec-347f-4721-b792-4c41269ba493",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Transform X_train and X_test using the preprocessor\n",
    "X_train_transformed = preprocessor.transform(X_train)\n",
    "X_test_transformed = preprocessor.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "c6fd2c04-6a3d-4d64-8fc1-e939e9544d4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model Building\n",
    "# The following models were selected\n",
    "models = {\n",
    "    'XGBoost': XGBRegressor(),\n",
    "    'Decision Tree': DecisionTreeRegressor(),\n",
    "    'Gradient Boosting': GradientBoostingRegressor(),\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d532d976-d6ab-4104-b8fd-e74d23267b5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Evaluation function\n",
    "def evaluate_model(model, X_test, y_test):\n",
    "    y_pred = model.predict(X_test)\n",
    "    return {\n",
    "        'MAE': mean_absolute_error(y_test, y_pred),\n",
    "        'MSE': mean_squared_error(y_test, y_pred),\n",
    "        'R2': r2_score(y_test, y_pred)\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "8cd84f85-e08e-4db5-84ee-39f8f1a1016c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBoost -> MAE: 0.0040, MSE: 0.0016, R2: 0.7140\n",
      "Decision Tree -> MAE: 0.0025, MSE: 0.0025, R2: 0.5615\n",
      "Gradient Boosting -> MAE: 0.0049, MSE: 0.0020, R2: 0.6366\n"
     ]
    }
   ],
   "source": [
    "# Train and evaluate all models - using transformed data \n",
    "for name, model in models.items():\n",
    "    model.fit(X_train_transformed, y_train) \n",
    "    metrics = evaluate_model(model, X_test_transformed, y_test) \n",
    "    print(f\"{name} -> MAE: {metrics['MAE']:.4f}, MSE: {metrics['MSE']:.4f}, R2: {metrics['R2']:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ef6679e0-db54-43c7-a785-ab16a4253277",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Undersampling Procedures\n",
    "normal = df[df['is_fraud'] == 0]\n",
    "fraud = df[df['is_fraud'] == 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "3d7b6ab2-51b1-42fd-a64f-6904d3b4fd53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1042569, 27)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "normal.shape "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "f87db805-0f98-4a02-9a6e-ec1765ad8dad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6006, 27)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fraud.shape "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "755becb0-637b-4340-b820-dd201586c97c",
   "metadata": {},
   "outputs": [],
   "source": [
    "normal_sample = normal.sample(n=6006)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "3c775faa-bb75-420b-ae41-1a3739ab8c08",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6006, 27)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "normal_sample.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "441d7221-2fb6-4a4a-bbf4-088ab6a1b5e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "new_data = pd.concat([normal_sample, fraud], ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "0d55a976-4644-4ca9-bd09-5c6d3de3b7db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>trans_date_trans_time</th>\n",
       "      <th>cc_num</th>\n",
       "      <th>merchant</th>\n",
       "      <th>category</th>\n",
       "      <th>amt</th>\n",
       "      <th>first</th>\n",
       "      <th>last</th>\n",
       "      <th>gender</th>\n",
       "      <th>street</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>zip</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>city_pop</th>\n",
       "      <th>job</th>\n",
       "      <th>dob</th>\n",
       "      <th>trans_num</th>\n",
       "      <th>unix_time</th>\n",
       "      <th>merch_lat</th>\n",
       "      <th>merch_long</th>\n",
       "      <th>is_fraud</th>\n",
       "      <th>hour</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>month</th>\n",
       "      <th>amt_bin</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-11-18 13:03:00</td>\n",
       "      <td>-2147483648</td>\n",
       "      <td>fraud_Bradtke, Torp and Bahringer</td>\n",
       "      <td>personal_care</td>\n",
       "      <td>18</td>\n",
       "      <td>Amber</td>\n",
       "      <td>Lewis</td>\n",
       "      <td>F</td>\n",
       "      <td>6296 John Keys Suite 858</td>\n",
       "      <td>Pembroke Township</td>\n",
       "      <td>IL</td>\n",
       "      <td>60958</td>\n",
       "      <td>41</td>\n",
       "      <td>-87</td>\n",
       "      <td>2135</td>\n",
       "      <td>Psychotherapist, child</td>\n",
       "      <td>08/05/2004</td>\n",
       "      <td>1e2eaa9ea43da5b0ff55655d50debaa6</td>\n",
       "      <td>1353243810</td>\n",
       "      <td>41</td>\n",
       "      <td>-88</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0-50</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-06-23 15:04:00</td>\n",
       "      <td>-2147483648</td>\n",
       "      <td>fraud_Kozey-Kuhlman</td>\n",
       "      <td>personal_care</td>\n",
       "      <td>9</td>\n",
       "      <td>Vanessa</td>\n",
       "      <td>Anderson</td>\n",
       "      <td>F</td>\n",
       "      <td>21178 Brittney Locks</td>\n",
       "      <td>Prosperity</td>\n",
       "      <td>SC</td>\n",
       "      <td>29127</td>\n",
       "      <td>34</td>\n",
       "      <td>-81</td>\n",
       "      <td>8333</td>\n",
       "      <td>Archaeologist</td>\n",
       "      <td>09/07/1994</td>\n",
       "      <td>fd59a07df9ca36978de855c569d2cb50</td>\n",
       "      <td>1340463889</td>\n",
       "      <td>34</td>\n",
       "      <td>-82</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>0-50</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-03-14 14:28:00</td>\n",
       "      <td>-2147483648</td>\n",
       "      <td>fraud_Wilkinson Ltd</td>\n",
       "      <td>entertainment</td>\n",
       "      <td>79</td>\n",
       "      <td>Matthew</td>\n",
       "      <td>Myers</td>\n",
       "      <td>M</td>\n",
       "      <td>4936 Michelle Points</td>\n",
       "      <td>Tower Hill</td>\n",
       "      <td>IL</td>\n",
       "      <td>62571</td>\n",
       "      <td>39</td>\n",
       "      <td>-88</td>\n",
       "      <td>1532</td>\n",
       "      <td>Radio broadcast assistant</td>\n",
       "      <td>09/01/1980</td>\n",
       "      <td>61d1ab8ca951b7477806ab74f82fada7</td>\n",
       "      <td>1331735308</td>\n",
       "      <td>40</td>\n",
       "      <td>-89</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>50-200</td>\n",
       "      <td>1.414214</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-08-09 01:08:00</td>\n",
       "      <td>-2147483648</td>\n",
       "      <td>fraud_Hudson-Ratke</td>\n",
       "      <td>grocery_pos</td>\n",
       "      <td>73</td>\n",
       "      <td>Gerald</td>\n",
       "      <td>Frank</td>\n",
       "      <td>M</td>\n",
       "      <td>95793 Andrea Ville Suite 533</td>\n",
       "      <td>Des Moines</td>\n",
       "      <td>IA</td>\n",
       "      <td>50314</td>\n",
       "      <td>41</td>\n",
       "      <td>-93</td>\n",
       "      <td>222785</td>\n",
       "      <td>Interior and spatial designer</td>\n",
       "      <td>10/08/1981</td>\n",
       "      <td>9dc2934dc6ca41ef2955a5cacc34ee4f</td>\n",
       "      <td>1344474522</td>\n",
       "      <td>41</td>\n",
       "      <td>-93</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>50-200</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-06-08 13:48:00</td>\n",
       "      <td>-2147483648</td>\n",
       "      <td>fraud_Weber, Thiel and Hammes</td>\n",
       "      <td>kids_pets</td>\n",
       "      <td>21</td>\n",
       "      <td>Ruth</td>\n",
       "      <td>Fuller</td>\n",
       "      <td>F</td>\n",
       "      <td>37732 Joe Courts Apt. 752</td>\n",
       "      <td>Darien</td>\n",
       "      <td>GA</td>\n",
       "      <td>31305</td>\n",
       "      <td>31</td>\n",
       "      <td>-81</td>\n",
       "      <td>5989</td>\n",
       "      <td>Tax adviser</td>\n",
       "      <td>05/05/1967</td>\n",
       "      <td>9f1b3acff37e1fdabfa692e5f22c9de2</td>\n",
       "      <td>1339163334</td>\n",
       "      <td>31</td>\n",
       "      <td>-80</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>0-50</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  trans_date_trans_time      cc_num                           merchant  \\\n",
       "0   2019-11-18 13:03:00 -2147483648  fraud_Bradtke, Torp and Bahringer   \n",
       "1   2019-06-23 15:04:00 -2147483648                fraud_Kozey-Kuhlman   \n",
       "2   2019-03-14 14:28:00 -2147483648                fraud_Wilkinson Ltd   \n",
       "3   2019-08-09 01:08:00 -2147483648                 fraud_Hudson-Ratke   \n",
       "4   2019-06-08 13:48:00 -2147483648      fraud_Weber, Thiel and Hammes   \n",
       "\n",
       "        category  amt    first      last gender                        street  \\\n",
       "0  personal_care   18    Amber     Lewis      F      6296 John Keys Suite 858   \n",
       "1  personal_care    9  Vanessa  Anderson      F          21178 Brittney Locks   \n",
       "2  entertainment   79  Matthew     Myers      M          4936 Michelle Points   \n",
       "3    grocery_pos   73   Gerald     Frank      M  95793 Andrea Ville Suite 533   \n",
       "4      kids_pets   21     Ruth    Fuller      F     37732 Joe Courts Apt. 752   \n",
       "\n",
       "                city state    zip  lat  long  city_pop  \\\n",
       "0  Pembroke Township    IL  60958   41   -87      2135   \n",
       "1         Prosperity    SC  29127   34   -81      8333   \n",
       "2         Tower Hill    IL  62571   39   -88      1532   \n",
       "3         Des Moines    IA  50314   41   -93    222785   \n",
       "4             Darien    GA  31305   31   -81      5989   \n",
       "\n",
       "                             job         dob  \\\n",
       "0         Psychotherapist, child  08/05/2004   \n",
       "1                  Archaeologist  09/07/1994   \n",
       "2      Radio broadcast assistant  09/01/1980   \n",
       "3  Interior and spatial designer  10/08/1981   \n",
       "4                    Tax adviser  05/05/1967   \n",
       "\n",
       "                          trans_num   unix_time  merch_lat  merch_long  \\\n",
       "0  1e2eaa9ea43da5b0ff55655d50debaa6  1353243810         41         -88   \n",
       "1  fd59a07df9ca36978de855c569d2cb50  1340463889         34         -82   \n",
       "2  61d1ab8ca951b7477806ab74f82fada7  1331735308         40         -89   \n",
       "3  9dc2934dc6ca41ef2955a5cacc34ee4f  1344474522         41         -93   \n",
       "4  9f1b3acff37e1fdabfa692e5f22c9de2  1339163334         31         -80   \n",
       "\n",
       "   is_fraud  hour  day_of_week  month amt_bin  distance  \n",
       "0         0    13            0     11    0-50  1.000000  \n",
       "1         0    15            6      6    0-50  1.000000  \n",
       "2         0    14            3      3  50-200  1.414214  \n",
       "3         0     1            4      8  50-200  0.000000  \n",
       "4         0    13            5      6    0-50  1.000000  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "b3a9a0bc-0d5b-419d-a5c7-6298a8899a1a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "is_fraud\n",
       "0    6006\n",
       "1    6006\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_data['is_fraud'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "cb07a67a-53fd-484d-a270-2c8e1c822b8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = new_data.drop('is_fraud', axis=1)\n",
    "y = new_data['is_fraud']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "97b47528-b9a2-4232-af8f-f54a72355946",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "dfd68e7e-8ba2-4959-8609-a74eab345e31",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_transformed = preprocessor.transform(X_train)\n",
    "X_test_transformed = preprocessor.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "a44f0ecb-4503-4122-943f-a9de1c471255",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model Building\n",
    "# The following models were selected\n",
    "models = {\n",
    "    'XGBoost': XGBRegressor(),\n",
    "    'Decision Tree': DecisionTreeRegressor(),\n",
    "    'Gradient Boosting': GradientBoostingRegressor(),\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "d0818c06-fd20-42ab-92ce-477e422bcba7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Evaluation function\n",
    "def evaluate_model(model, X_test, y_test):\n",
    "    y_pred = model.predict(X_test)\n",
    "    return {\n",
    "        'MAE': mean_absolute_error(y_test, y_pred),\n",
    "        'MSE': mean_squared_error(y_test, y_pred),\n",
    "        'R2': r2_score(y_test, y_pred)\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "dfee236d-7c2e-4c92-a575-f58840832a5b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBoost -> MAE: 0.0592, MSE: 0.0226, R2: 0.9096\n",
      "Decision Tree -> MAE: 0.0291, MSE: 0.0291, R2: 0.8835\n",
      "Gradient Boosting -> MAE: 0.0976, MSE: 0.0334, R2: 0.8664\n"
     ]
    }
   ],
   "source": [
    "# Train and evaluate all models - using transformed data \n",
    "for name, model in models.items():\n",
    "    model.fit(X_train_transformed, y_train) \n",
    "    metrics = evaluate_model(model, X_test_transformed, y_test) \n",
    "    print(f\"{name} -> MAE: {metrics['MAE']:.4f}, MSE: {metrics['MSE']:.4f}, R2: {metrics['R2']:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "bbad9a0a-e5f0-4437-bb43-9c84fa2ff2f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Oversampling procedures\n",
    "X = df.drop('is_fraud', axis=1)\n",
    "y = df['is_fraud']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "455470de-decc-462a-9f66-010ef6b137a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1048575, 26)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "0e36f2a0-df33-4a8b-8c22-e2b05d54fb66",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1048575,)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "6b886f99-c993-4bb0-ba2a-8e19cc249dbc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialise SMOTE\n",
    "smote = SMOTE(random_state=42)\n",
    "X_resampled, y_resampled = smote.fit_resample(X_transformed, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "5cd21945-750d-474e-8af3-ca0d80969324",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Splitting the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "751ba116-8894-4149-a360-5533a435f9b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model Building\n",
    "# The following models were selected\n",
    "models = {\n",
    "    'XGBoost': XGBRegressor(),\n",
    "    'Decision Tree': DecisionTreeRegressor(),\n",
    "    'Gradient Boosting': GradientBoostingRegressor(),\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "f8845205-f0f3-4057-a0c2-072e43b33018",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Evaluation function\n",
    "def evaluate_model(model, X_test, y_test):\n",
    "    y_pred = model.predict(X_test)\n",
    "    return {\n",
    "        'MAE': mean_absolute_error(y_test, y_pred),\n",
    "        'MSE': mean_squared_error(y_test, y_pred),\n",
    "        'R2': r2_score(y_test, y_pred)\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "74f94657-ae74-4a4e-b599-c2b1db4da7bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBoost -> MAE: 0.0301, MSE: 0.0058, R2: 0.9768\n",
      "Decision Tree -> MAE: 0.0018, MSE: 0.0018, R2: 0.9929\n",
      "Gradient Boosting -> MAE: 0.0882, MSE: 0.0262, R2: 0.8951\n"
     ]
    }
   ],
   "source": [
    "# Train and evaluate all models \n",
    "for name, model in models.items():\n",
    "    model.fit(X_train, y_train)  \n",
    "    metrics = evaluate_model(model, X_test, y_test)  \n",
    "    print(f\"{name} -> MAE: {metrics['MAE']:.4f}, MSE: {metrics['MSE']:.4f}, R2: {metrics['R2']:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "cea7ec23-cfae-427d-8443-09fa4c051c97",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;DecisionTreeRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeRegressor.html\">?<span>Documentation for DecisionTreeRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeRegressor()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeRegressor()"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The best model \n",
    "dtr = DecisionTreeRegressor() \n",
    "dtr.fit(X_resampled, y_resampled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "0d664c53-7711-4532-af0a-29f8b48c5cec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
       "                 ColumnTransformer(transformers=[(&#x27;num&#x27;, StandardScaler(),\n",
       "                                                  [&#x27;amt&#x27;, &#x27;city_pop&#x27;, &#x27;lat&#x27;,\n",
       "                                                   &#x27;long&#x27;, &#x27;merch_lat&#x27;,\n",
       "                                                   &#x27;merch_long&#x27;, &#x27;hour&#x27;,\n",
       "                                                   &#x27;day_of_week&#x27;, &#x27;month&#x27;,\n",
       "                                                   &#x27;distance&#x27;]),\n",
       "                                                 (&#x27;cat&#x27;,\n",
       "                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),\n",
       "                                                  [&#x27;category&#x27;, &#x27;gender&#x27;,\n",
       "                                                   &#x27;state&#x27;, &#x27;job&#x27;,\n",
       "                                                   &#x27;amt_bin&#x27;])])),\n",
       "                (&#x27;model&#x27;, DecisionTreeRegressor())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
       "                 ColumnTransformer(transformers=[(&#x27;num&#x27;, StandardScaler(),\n",
       "                                                  [&#x27;amt&#x27;, &#x27;city_pop&#x27;, &#x27;lat&#x27;,\n",
       "                                                   &#x27;long&#x27;, &#x27;merch_lat&#x27;,\n",
       "                                                   &#x27;merch_long&#x27;, &#x27;hour&#x27;,\n",
       "                                                   &#x27;day_of_week&#x27;, &#x27;month&#x27;,\n",
       "                                                   &#x27;distance&#x27;]),\n",
       "                                                 (&#x27;cat&#x27;,\n",
       "                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),\n",
       "                                                  [&#x27;category&#x27;, &#x27;gender&#x27;,\n",
       "                                                   &#x27;state&#x27;, &#x27;job&#x27;,\n",
       "                                                   &#x27;amt_bin&#x27;])])),\n",
       "                (&#x27;model&#x27;, DecisionTreeRegressor())])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;preprocessor: ColumnTransformer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for preprocessor: ColumnTransformer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;, StandardScaler(),\n",
       "                                 [&#x27;amt&#x27;, &#x27;city_pop&#x27;, &#x27;lat&#x27;, &#x27;long&#x27;, &#x27;merch_lat&#x27;,\n",
       "                                  &#x27;merch_long&#x27;, &#x27;hour&#x27;, &#x27;day_of_week&#x27;, &#x27;month&#x27;,\n",
       "                                  &#x27;distance&#x27;]),\n",
       "                                (&#x27;cat&#x27;, OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),\n",
       "                                 [&#x27;category&#x27;, &#x27;gender&#x27;, &#x27;state&#x27;, &#x27;job&#x27;,\n",
       "                                  &#x27;amt_bin&#x27;])])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">num</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;amt&#x27;, &#x27;city_pop&#x27;, &#x27;lat&#x27;, &#x27;long&#x27;, &#x27;merch_lat&#x27;, &#x27;merch_long&#x27;, &#x27;hour&#x27;, &#x27;day_of_week&#x27;, &#x27;month&#x27;, &#x27;distance&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">cat</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;category&#x27;, &#x27;gender&#x27;, &#x27;state&#x27;, &#x27;job&#x27;, &#x27;amt_bin&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;OneHotEncoder<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.OneHotEncoder.html\">?<span>Documentation for OneHotEncoder</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeRegressor.html\">?<span>Documentation for DecisionTreeRegressor</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeRegressor()</pre></div> </div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(steps=[('preprocessor',\n",
       "                 ColumnTransformer(transformers=[('num', StandardScaler(),\n",
       "                                                  ['amt', 'city_pop', 'lat',\n",
       "                                                   'long', 'merch_lat',\n",
       "                                                   'merch_long', 'hour',\n",
       "                                                   'day_of_week', 'month',\n",
       "                                                   'distance']),\n",
       "                                                 ('cat',\n",
       "                                                  OneHotEncoder(handle_unknown='ignore'),\n",
       "                                                  ['category', 'gender',\n",
       "                                                   'state', 'job',\n",
       "                                                   'amt_bin'])])),\n",
       "                ('model', DecisionTreeRegressor())])"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  Build the preprocessing plus model pipeline\n",
    "# Load data\n",
    "df = pd.read_csv(\"credit card transaction for training final..csv\")\n",
    "\n",
    "# Feature Engineering\n",
    "# Create time-based features\n",
    "df['trans_date_trans_time'] = pd.to_datetime(df['trans_date_trans_time'], format='%d/%m/%Y %H:%M', errors='coerce')\n",
    "df['hour'] = df['trans_date_trans_time'].dt.hour\n",
    "df['day_of_week'] = df['trans_date_trans_time'].dt.dayofweek\n",
    "df['month'] = df['trans_date_trans_time'].dt.month\n",
    "\n",
    "# Create transaction amount bins\n",
    "df['amt_bin'] = pd.cut(df['amt'], bins=[0, 50, 200, 500, 1000, 5000, 50000], \n",
    "                      labels=['0-50', '50-200', '200-500', '500-1000', '1000-5000', '5000+'])\n",
    "\n",
    "# Calculate distance between merchant and customer\n",
    "df['distance'] = np.sqrt((df['lat']-df['merch_lat'])**2 + (df['long']-df['merch_long'])**2)\n",
    "\n",
    "# Separate features and target\n",
    "X = df.drop(\"is_fraud\", axis=1) # Now X includes the engineered features\n",
    "y = df[\"is_fraud\"]\n",
    "\n",
    "# Define preprocessing\n",
    "numeric_transformer = StandardScaler()\n",
    "categorical_transformer = OneHotEncoder(handle_unknown='ignore')\n",
    "\n",
    "# Include all features (original + engineered) in the preprocessor\n",
    "numeric_features = ['amt', 'city_pop', 'lat', 'long', 'merch_lat', 'merch_long', 'hour', 'day_of_week', 'month', 'distance']  \n",
    "categorical_features = ['category', 'gender', 'state', 'job', 'amt_bin']\n",
    "\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('num', numeric_transformer, numeric_features),\n",
    "        ('cat', categorical_transformer, categorical_features)\n",
    "    ]\n",
    ")\n",
    "\n",
    "# Build pipeline\n",
    "pipeline = Pipeline(steps=[\n",
    "    ('preprocessor', preprocessor),\n",
    "    ('model', DecisionTreeRegressor())\n",
    "])\n",
    "\n",
    "# Fit the full pipeline\n",
    "pipeline.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "9cccaac3-283a-4d13-9a0c-616eab2626a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Real-Time Prediction Function\n",
    "def predict_transaction(input_data):\n",
    "    \"\"\"\n",
    "    input_data: dict or single-row DataFrame containing the transaction features.\n",
    "    \"\"\"\n",
    "    if isinstance(input_data, dict):\n",
    "        input_data = pd.DataFrame([input_data])\n",
    "    \n",
    "    prediction = model.predict(input_data)[0]\n",
    "    label = \"Fraud Transaction\" if prediction == 1 else \"Normal Transaction\"\n",
    "    return label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "c7767682-2511-4b02-b6d5-a68b430c0bd1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['fraud_detection_pipeline.pkl']"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Save the pipeline to file\n",
    "joblib.dump(pipeline, \"fraud_detection_pipeline.pkl\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
